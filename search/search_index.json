{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This site contains the project documentation for the pyContabo project that is a python API Client for the Contabo API. Installation Using pip pip install git+https://github.com/xLeon-python/pyContabo.git Using setuptools git clone https://github.com/xLeon-python/pyContabo.git cd pyContabo python3 setup.py install --user Demo from pyContabo.Contabo import contabo cont = contabo(\"client_id\", \"client_secret\", \"api_user\", \"api_password\") instance = cont.Instances.get()[0] print(f\"IPv4:\\t{instance.ipv4}\\nCPU Cores:\\t{instance.cpuCores}\\nRAM:\\t{instance.ramMb}\\nDrive:\\t{instance.diskMb} ({instance.productType})\") print(instance.Snapshots.Audits.get()[0].rawJson) For more examples go to Examples Todo Instances, Instances Audits, Instance Actions, Instance Actions Audits, Snapshots, Snapshots Audits Images and Images Audits Tags, Tag Assignments, Tags Audits, Tag Assignments Audits Users, Roles, User Audits, Roles Audits Secrets, Secrets Audits Object Storages, Object Storages Audits Private Networks, Private Networks Audits Logging Documentation Better API key management (auto renewel) More types to replace strings in function arguments Enable support to set x-request-id and x-trace-id for requests","title":"Index"},{"location":"#installation","text":"","title":"Installation"},{"location":"#using-pip","text":"pip install git+https://github.com/xLeon-python/pyContabo.git","title":"Using pip"},{"location":"#using-setuptools","text":"git clone https://github.com/xLeon-python/pyContabo.git cd pyContabo python3 setup.py install --user","title":"Using setuptools"},{"location":"#demo","text":"from pyContabo.Contabo import contabo cont = contabo(\"client_id\", \"client_secret\", \"api_user\", \"api_password\") instance = cont.Instances.get()[0] print(f\"IPv4:\\t{instance.ipv4}\\nCPU Cores:\\t{instance.cpuCores}\\nRAM:\\t{instance.ramMb}\\nDrive:\\t{instance.diskMb} ({instance.productType})\") print(instance.Snapshots.Audits.get()[0].rawJson) For more examples go to Examples","title":"Demo"},{"location":"#todo","text":"Instances, Instances Audits, Instance Actions, Instance Actions Audits, Snapshots, Snapshots Audits Images and Images Audits Tags, Tag Assignments, Tags Audits, Tag Assignments Audits Users, Roles, User Audits, Roles Audits Secrets, Secrets Audits Object Storages, Object Storages Audits Private Networks, Private Networks Audits Logging Documentation Better API key management (auto renewel) More types to replace strings in function arguments Enable support to set x-request-id and x-trace-id for requests","title":"Todo"},{"location":"examples/","text":"Daily Snapshot This assumes the instance 0 has a limit of 1 snapshot. Every 86400s (= 1 day) the snapshot 0 gets deleted and a new one is created. from time import sleep from pyContabo.Contabo import contabo client_id=\"CLIENT_ID\" client_secret=\"CLIENT_SECRET\" api_user=\"API_USER\" api_password=\"API_PASSWORD\" cont = contabo(client_id, client_secret, api_user, api_password) instance = cont.Instances.get()[0] while 1: snapshots = instance.Snapshots.get() if len(snapshots) > 0: snapshots[0].delete() print(\"Deleted Snapshot\") instance.Snapshots.create(\"AutoCreate\", description=\"Created by pyContabo\") print(\"Created Snapshot\") sleep(86400) Or using schedule : from time import sleep import schedule from pyContabo.Contabo import contabo client_id=\"CLIENT_ID\" client_secret=\"CLIENT_SECRET\" api_user=\"API_USER\" api_password=\"API_PASSWORD\" cont = contabo(client_id, client_secret, api_user, api_password) instance = cont.Instances.get()[0] def take_snapshot(): snapshots = instance.Snapshots.get() if len(snapshots) > 0: # No need to delete snapshot 0 if it doesn't exist snapshots[0].delete() instance.Snapshots.create(\"DailySnapshot\", description=\"Created by pyContabo\") schedule.every().day.at(\"01:00\").do(take_snapshot) # runs function at 1am while True: schedule.run_pending() sleep(60) # wait one minute","title":"Examples"},{"location":"examples/#daily-snapshot","text":"This assumes the instance 0 has a limit of 1 snapshot. Every 86400s (= 1 day) the snapshot 0 gets deleted and a new one is created. from time import sleep from pyContabo.Contabo import contabo client_id=\"CLIENT_ID\" client_secret=\"CLIENT_SECRET\" api_user=\"API_USER\" api_password=\"API_PASSWORD\" cont = contabo(client_id, client_secret, api_user, api_password) instance = cont.Instances.get()[0] while 1: snapshots = instance.Snapshots.get() if len(snapshots) > 0: snapshots[0].delete() print(\"Deleted Snapshot\") instance.Snapshots.create(\"AutoCreate\", description=\"Created by pyContabo\") print(\"Created Snapshot\") sleep(86400) Or using schedule : from time import sleep import schedule from pyContabo.Contabo import contabo client_id=\"CLIENT_ID\" client_secret=\"CLIENT_SECRET\" api_user=\"API_USER\" api_password=\"API_PASSWORD\" cont = contabo(client_id, client_secret, api_user, api_password) instance = cont.Instances.get()[0] def take_snapshot(): snapshots = instance.Snapshots.get() if len(snapshots) > 0: # No need to delete snapshot 0 if it doesn't exist snapshots[0].delete() instance.Snapshots.create(\"DailySnapshot\", description=\"Created by pyContabo\") schedule.every().day.at(\"01:00\").do(take_snapshot) # runs function at 1am while True: schedule.run_pending() sleep(60) # wait one minute","title":"Daily Snapshot"},{"location":"images/","text":"Images Images ( _http ) Source code in pyContabo/Images.py 10 11 12 13 def __init__ ( self , _http ): self . _http = _http self . Audits = ImagesAudits ( _http ) create create ( name , url , osType , version , description = None , x_request_id = None , x_trace_id = None , ) Provide a custom image. Examples: >>> Images . create ( name = \"Arch\" , url = \"https://api.contabo.com\" , osType = \"Linux\" , version = \"1.0\" , description = \"btw\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str Image Name required description str Image Description None url str URL from where the image has been downloaded / provided. required osType str Provided type of operating system (OS). Please specify Windows for MS Windows and Linux for other OS. required Returns: Type Description bool Bool respresenting if the image has been succesfully created. Source code in pyContabo/Images.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def create ( self , name : str , url : str , osType : str , version : str , description : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Provide a custom image. Examples: >>> Images.create(name=\"Arch\", url=\"https://api.contabo.com\", osType=\"Linux\", version=\"1.0\", description=\"btw\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: Image Name description: Image Description url: URL from where the image has been downloaded / provided. osType: Provided type of operating system (OS). Please specify `Windows` for MS Windows and `Linux` for other OS. Returns: Bool respresenting if the image has been succesfully created. \"\"\" data = json . dumps ( { \"name\" : name , \"description\" : description , \"url\" : url , \"osType\" : osType , \"version\" : version , } ) resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/images\" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False get get ( id = None , page = None , pageSize = None , orderBy = None , name = None , standardImage = None , x_request_id = None , x_trace_id = None , ) fetches any image(s) by id or other parameters Examples: >>> Images . get () [image] >>> Images . get ( name = \"Arch\" , standardImage = \"true\" , orderBy = \"name:asc\" ) [image] >>> Assignments . get ( id = \" Example: 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d\" ) image Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the image None name str The name of the image None standardImage bool Flag indicating that image is either a standard (true) or a custom image (false) None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None Returns: Type Description Union [ Image , List [ Image ]] List and filter all available standard images provided by Contabo and your uploaded custom images. Source code in pyContabo/Images.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def get ( self , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , name : str = None , standardImage : bool = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Image , List [ Image ]]: \"\"\"fetches any image(s) by id or other parameters Examples: >>> Images.get() [image] >>> Images.get(name=\"Arch\", standardImage=\"true\", orderBy=\"name:asc\") [image] >>> Assignments.get(id=\" Example: 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d\") image Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the image name: The name of the image standardImage: Flag indicating that image is either a standard (true) or a custom image (false) page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` Returns: List and filter all available standard images provided by Contabo and your uploaded custom images. \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/compute/images/ { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return Image ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/compute/images? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'name= { name } &' if name is not None else '' }{ f 'standardImage= { standardImage } &' if standardImage is not None else '' } \" url = url [: - 1 ] # Remove the \"?\" at the end of the url resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] images = [] for i in resp . json ()[ \"data\" ]: images . append ( Image ( i , self . _http )) return images statistics statistics ( x_request_id = None , x_trace_id = None ) List statistics regarding the customer's custom images such as the number of custom images uploaded, used disk space, free available disk space and total available disk space. Examples: >>> Images . statistics () [ImagesStats] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool List of ImagesStats Source code in pyContabo/Images.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def statistics ( self , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"List statistics regarding the customer's custom images such as the number of custom images uploaded, used disk space, free available disk space and total available disk space. Examples: >>> Images.statistics() [ImagesStats] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: List of ImagesStats \"\"\" resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/compute/images/stats\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : stats = [] for i in resp . json ()[ \"data\" ]: stats . append ( ImagesStats ( i )) return stats else : return False Image Image ( json , _http ) Source code in pyContabo/Image.py 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . imageId = json [ \"imageId\" ] self . name = json [ \"name\" ] self . description = json [ \"description\" ] self . url = json [ \"url\" ] self . sizeMb = json [ \"sizeMb\" ] self . uploadedSizeMb = json [ \"uploadedSizeMb\" ] self . osType = json [ \"osType\" ] self . version = json [ \"version\" ] self . format = json [ \"format\" ] self . status = json [ \"status\" ] self . errorMessage = json [ \"errorMessage\" ] self . standardImage = json [ \"standardImage\" ] self . creationDate = json [ \"creationDate\" ] self . lastModifiedDate = json [ \"lastModifiedDate\" ] self . rawJson = json delete delete ( x_request_id = None , x_trace_id = None ) deletes the image Examples: >>> image . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the image has been succesfully deleted. Source code in pyContabo/Image.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the image Examples: >>> image.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the image has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/compute/images/ { self . imageId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False update update ( name , description , x_request_id = None , x_trace_id = None ) Update name of the custom image. Examples: >>> image . update ( name = \"Arch Linux\" , description = \"btw\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str Image Name required description str Image Description required Returns: Type Description bool Bool respresenting if the image has been succesfully updated. Source code in pyContabo/Image.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def update ( self , name : str , description : str , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Update name of the custom image. Examples: >>> image.update(name=\"Arch Linux\", description=\"btw\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: Image Name description: Image Description Returns: Bool respresenting if the image has been succesfully updated. \"\"\" resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/compute/images/ { self . imageId } \" , data = { \"name\" : name , \"description\" : description }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False ImagesAudits ImagesAudits ( _http ) Source code in pyContabo/audits/ImagesAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http get get ( page = None , pageSize = None , orderBy = None , imageId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> image . Audits . get () [ImagesAudit] >>> image . Audits . get ( imageId = \"e443eab5-647a-4bc3-b4f9-16f5a281224d\" ) [ImagesAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None imageId str The identifier of the image. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ ImagesAudit ] List of ImagesAudit Source code in pyContabo/audits/ImagesAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , imageId : str = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ ImagesAudit ]: \"\"\"fetches audits Examples: >>> image.Audits.get() [ImagesAudit] >>> image.Audits.get(imageId=\"e443eab5-647a-4bc3-b4f9-16f5a281224d\") [ImagesAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` imageId: The identifier of the image. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of ImagesAudit \"\"\" url = f \"https://api.contabo.com/v1/images/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'imageId= { imageId } &' if imageId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( ImagesAudit ( i )) return audits else : return []","title":"Images"},{"location":"images/#pyContabo.Images.Images","text":"Images ( _http ) Source code in pyContabo/Images.py 10 11 12 13 def __init__ ( self , _http ): self . _http = _http self . Audits = ImagesAudits ( _http )","title":"Images"},{"location":"images/#pyContabo.Images.Images.create","text":"create ( name , url , osType , version , description = None , x_request_id = None , x_trace_id = None , ) Provide a custom image. Examples: >>> Images . create ( name = \"Arch\" , url = \"https://api.contabo.com\" , osType = \"Linux\" , version = \"1.0\" , description = \"btw\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str Image Name required description str Image Description None url str URL from where the image has been downloaded / provided. required osType str Provided type of operating system (OS). Please specify Windows for MS Windows and Linux for other OS. required Returns: Type Description bool Bool respresenting if the image has been succesfully created. Source code in pyContabo/Images.py 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 def create ( self , name : str , url : str , osType : str , version : str , description : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Provide a custom image. Examples: >>> Images.create(name=\"Arch\", url=\"https://api.contabo.com\", osType=\"Linux\", version=\"1.0\", description=\"btw\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: Image Name description: Image Description url: URL from where the image has been downloaded / provided. osType: Provided type of operating system (OS). Please specify `Windows` for MS Windows and `Linux` for other OS. Returns: Bool respresenting if the image has been succesfully created. \"\"\" data = json . dumps ( { \"name\" : name , \"description\" : description , \"url\" : url , \"osType\" : osType , \"version\" : version , } ) resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/images\" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False","title":"create()"},{"location":"images/#pyContabo.Images.Images.get","text":"get ( id = None , page = None , pageSize = None , orderBy = None , name = None , standardImage = None , x_request_id = None , x_trace_id = None , ) fetches any image(s) by id or other parameters Examples: >>> Images . get () [image] >>> Images . get ( name = \"Arch\" , standardImage = \"true\" , orderBy = \"name:asc\" ) [image] >>> Assignments . get ( id = \" Example: 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d\" ) image Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the image None name str The name of the image None standardImage bool Flag indicating that image is either a standard (true) or a custom image (false) None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None Returns: Type Description Union [ Image , List [ Image ]] List and filter all available standard images provided by Contabo and your uploaded custom images. Source code in pyContabo/Images.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 def get ( self , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , name : str = None , standardImage : bool = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Image , List [ Image ]]: \"\"\"fetches any image(s) by id or other parameters Examples: >>> Images.get() [image] >>> Images.get(name=\"Arch\", standardImage=\"true\", orderBy=\"name:asc\") [image] >>> Assignments.get(id=\" Example: 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d\") image Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the image name: The name of the image standardImage: Flag indicating that image is either a standard (true) or a custom image (false) page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` Returns: List and filter all available standard images provided by Contabo and your uploaded custom images. \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/compute/images/ { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return Image ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/compute/images? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'name= { name } &' if name is not None else '' }{ f 'standardImage= { standardImage } &' if standardImage is not None else '' } \" url = url [: - 1 ] # Remove the \"?\" at the end of the url resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] images = [] for i in resp . json ()[ \"data\" ]: images . append ( Image ( i , self . _http )) return images","title":"get()"},{"location":"images/#pyContabo.Images.Images.statistics","text":"statistics ( x_request_id = None , x_trace_id = None ) List statistics regarding the customer's custom images such as the number of custom images uploaded, used disk space, free available disk space and total available disk space. Examples: >>> Images . statistics () [ImagesStats] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool List of ImagesStats Source code in pyContabo/Images.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 def statistics ( self , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"List statistics regarding the customer's custom images such as the number of custom images uploaded, used disk space, free available disk space and total available disk space. Examples: >>> Images.statistics() [ImagesStats] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: List of ImagesStats \"\"\" resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/compute/images/stats\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : stats = [] for i in resp . json ()[ \"data\" ]: stats . append ( ImagesStats ( i )) return stats else : return False","title":"statistics()"},{"location":"images/#pyContabo.Image.Image","text":"Image ( json , _http ) Source code in pyContabo/Image.py 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . imageId = json [ \"imageId\" ] self . name = json [ \"name\" ] self . description = json [ \"description\" ] self . url = json [ \"url\" ] self . sizeMb = json [ \"sizeMb\" ] self . uploadedSizeMb = json [ \"uploadedSizeMb\" ] self . osType = json [ \"osType\" ] self . version = json [ \"version\" ] self . format = json [ \"format\" ] self . status = json [ \"status\" ] self . errorMessage = json [ \"errorMessage\" ] self . standardImage = json [ \"standardImage\" ] self . creationDate = json [ \"creationDate\" ] self . lastModifiedDate = json [ \"lastModifiedDate\" ] self . rawJson = json","title":"Image"},{"location":"images/#pyContabo.Image.Image.delete","text":"delete ( x_request_id = None , x_trace_id = None ) deletes the image Examples: >>> image . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the image has been succesfully deleted. Source code in pyContabo/Image.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the image Examples: >>> image.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the image has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/compute/images/ { self . imageId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False","title":"delete()"},{"location":"images/#pyContabo.Image.Image.update","text":"update ( name , description , x_request_id = None , x_trace_id = None ) Update name of the custom image. Examples: >>> image . update ( name = \"Arch Linux\" , description = \"btw\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str Image Name required description str Image Description required Returns: Type Description bool Bool respresenting if the image has been succesfully updated. Source code in pyContabo/Image.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 def update ( self , name : str , description : str , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Update name of the custom image. Examples: >>> image.update(name=\"Arch Linux\", description=\"btw\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: Image Name description: Image Description Returns: Bool respresenting if the image has been succesfully updated. \"\"\" resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/compute/images/ { self . imageId } \" , data = { \"name\" : name , \"description\" : description }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False","title":"update()"},{"location":"images/#pyContabo.audits.ImagesAudits.ImagesAudits","text":"ImagesAudits ( _http ) Source code in pyContabo/audits/ImagesAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http","title":"ImagesAudits"},{"location":"images/#pyContabo.audits.ImagesAudits.ImagesAudits.get","text":"get ( page = None , pageSize = None , orderBy = None , imageId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> image . Audits . get () [ImagesAudit] >>> image . Audits . get ( imageId = \"e443eab5-647a-4bc3-b4f9-16f5a281224d\" ) [ImagesAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None imageId str The identifier of the image. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ ImagesAudit ] List of ImagesAudit Source code in pyContabo/audits/ImagesAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , imageId : str = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ ImagesAudit ]: \"\"\"fetches audits Examples: >>> image.Audits.get() [ImagesAudit] >>> image.Audits.get(imageId=\"e443eab5-647a-4bc3-b4f9-16f5a281224d\") [ImagesAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` imageId: The identifier of the image. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of ImagesAudit \"\"\" url = f \"https://api.contabo.com/v1/images/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'imageId= { imageId } &' if imageId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( ImagesAudit ( i )) return audits else : return []","title":"get()"},{"location":"instances/","text":"Instances Instances ( _http ) Source code in pyContabo/Instances.py 16 17 18 19 def __init__ ( self , _http ): self . Audits = InstancesAudits ( _http ) self . _http = _http create create ( imageId , productId , region , period , sshKeys = [], rootPassword = \"\" , userData = \"\" , licenseName = None , displayName = None , defaultUser = None , x_request_id = None , x_trace_id = None , ) Creates a new instance Examples: >>> Instances . create ( imageId = \"db1409d2-ed92-4f2f-978e-7b2fa4a1ec90\" , productId = product . P1 , region = region . EU , period = \"1\" , licenseName = license . cPanel5 ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None imageId str ImageId to be used to setup the compute instance. Default is Ubuntu 20.04. required productId product Product ID. Default is V1. required region region Instance Region where the compute instance should be located. Default is EU. required sshKeys List [ int ] Array of secretIds of public SSH keys for logging into as defaultUser with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API. [] rootPassword str secretId of the password for the defaultUser with administrator/root privileges. For Linux/BSD please use SSH, for Windows RDP. Please refer to Secrets Management API. '' userData str Cloud-Init Config in order to customize during start of compute instance. '' licenseName license Additional licence in order to enhance your chosen product, mainly needed for software licenses on your product (not needed for windows). None period int Initial contract period in months. Available periods are: 1, 3, 6 and 12 months. Default to 1 month required displayName str The display name of the instance None defaultUser str Default user name created for login during (re-)installation with administrative privileges. Allowed values for Linux/BSD are admin (use sudo to apply administrative privileges like root) or root . Allowed values for Windows are admin (has administrative privileges like administrator) or administrator . None Returns: Type Description bool Bool respresenting if the instance has been succesfully created. Source code in pyContabo/Instances.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def create ( self , imageId : str , productId : product , region : region , period : int , sshKeys : List [ int ] = [], rootPassword : str = \"\" , userData : str = \"\" , licenseName : license = None , displayName : str = None , defaultUser : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Creates a new instance Examples: >>> Instances.create(imageId=\"db1409d2-ed92-4f2f-978e-7b2fa4a1ec90\", productId=product.P1, region=region.EU, period=\"1\", licenseName=license.cPanel5) True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. imageId: ImageId to be used to setup the compute instance. Default is Ubuntu 20.04. productId: Product ID. Default is V1. region: Instance Region where the compute instance should be located. Default is EU. sshKeys: Array of `secretIds` of public SSH keys for logging into as `defaultUser` with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API. rootPassword: `secretId` of the password for the `defaultUser` with administrator/root privileges. For Linux/BSD please use SSH, for Windows RDP. Please refer to Secrets Management API. userData: Cloud-Init Config in order to customize during start of compute instance. licenseName: Additional licence in order to enhance your chosen product, mainly needed for software licenses on your product (not needed for windows). period: Initial contract period in months. Available periods are: 1, 3, 6 and 12 months. Default to 1 month displayName: The display name of the instance defaultUser: Default user name created for login during (re-)installation with administrative privileges. Allowed values for Linux/BSD are `admin` (use sudo to apply administrative privileges like root) or `root`. Allowed values for Windows are `admin` (has administrative privileges like administrator) or `administrator`. Returns: Bool respresenting if the instance has been succesfully created. \"\"\" resp = self . _http . request ( type = \"post\" , url = \"https://api.contabo.com/v1/compute/instances\" , data = { \"imageId\" : imageId , \"productId\" : productId . name , \"region\" : region . name , \"sshKeys\" : sshKeys , \"rootPassword\" : rootPassword , \"userData\" : userData , \"license\" : licenseName . name , \"period\" : period , \"displayName\" : displayName , \"defaultUser\" : defaultUser , }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) # _log.info(\"created new instance with imageId=%s productId=%s region=%s period=%s sshKeys=%s rootPassword=%s userData=%s, licenseName=%s\", imageId, productId, region, period, sshKeys, rootPassword, userData, licenseName) if resp . status_code == 201 : return True return False get get ( id = None , page = None , pageSize = None , orderBy = None , name = None , region = None , instanceIds = None , status = None , x_request_id = None , x_trace_id = None , ) fetches any instances(s) by id or other parameters Examples: >>> Instances . get () [instance] >>> Instances . get ( name = \"vmd12345\" , region = \"EU\" , status = \"provisioning\" ) [instance] >>> Instances . get ( id = \"100\" ) instance Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the instance None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None name str The name of the instance None region str The Region of the instance None instanceIds str Comma separated instances identifiers None status str The status of the instance None Returns: Type Description Union [ Instance , List [ Instance ]] List of instances Source code in pyContabo/Instances.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def get ( self , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , name : str = None , region : str = None , instanceIds : str = None , status : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Instance , List [ Instance ]]: \"\"\"fetches any instances(s) by id or other parameters Examples: >>> Instances.get() [instance] >>> Instances.get(name=\"vmd12345\", region=\"EU\", status=\"provisioning\") [instance] >>> Instances.get(id=\"100\") instance Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the instance page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` name: The name of the instance region: The Region of the instance instanceIds: Comma separated instances identifiers status: The status of the instance Returns: List of instances \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/compute/instances/ { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] # _log.info(\"fetched instance with id=%s\", id) return Instance ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/compute/instances? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'name= { name } &' if name is not None else '' }{ f 'region= { region } &' if region is not None else '' }{ f 'instanceIds= { instanceIds } &' if instanceIds is not None else '' }{ f 'status= { status } &' if status is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] instances = [] for i in data : instances . append ( Instance ( i , self . _http )) # _log.info(\"fetched %s instances with page=%s pageSize=%s orderByField=%s orderBy=%s name=%s region=%s instanceId=%s status=%s\", len(instances), page, pageSize, orderByField, orderBy, name, region, instanceId, status) return instances Instance Instance ( json , _http ) Source code in pyContabo/Instance.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . name = json [ \"name\" ] self . instanceId = json [ \"instanceId\" ] self . region = json [ \"region\" ] self . ipv4 = json [ \"ipConfig\" ][ \"v4\" ][ \"ip\" ] self . ipv6 = json [ \"ipConfig\" ][ \"v6\" ][ \"ip\" ] self . macAddress = json [ \"macAddress\" ] self . ramMb = json [ \"ramMb\" ] self . cpuCores = json [ \"cpuCores\" ] self . osType = json [ \"osType\" ] self . diskMb = json [ \"diskMb\" ] self . createdDate = json [ \"createdDate\" ] self . cancelDate = json [ \"cancelDate\" ] self . status = json [ \"status\" ] self . vHostId = json [ \"vHostId\" ] self . addOns = json [ \"addOns\" ] self . productType = json [ \"productType\" ] self . rawJson = json self . Snapshots = Snapshots ( json [ \"instanceId\" ], _http ) self . Audits = InstanceActionsAudits ( _http ) cancel cancel ( x_request_id = None , x_trace_id = None ) Cancel a compute instance. Examples: >>> instance . cancel () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the instance has been succesfully cancelled. Source code in pyContabo/Instance.py 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 def cancel ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Cancel a compute instance. Examples: >>> instance.cancel() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the instance has been succesfully cancelled. \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/instances/ { str ( self . instanceId ) } /cancel\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False reinstall reinstall ( imageId , sshKeys = None , rootPassword = None , userData = None , defaultUser = None , x_request_id = None , x_trace_id = None , ) reinstall a specific instance with a new image and optionally add ssh keys, a root password or cloud-init. Examples: >>> instance . reinstall ( imageId = \"3f184ab8-a600-4e7c-8c9b-3413e21a3752\" , sshKeys = \"[123, 125]\" , rootPassword = 1 , userData = \"#cloud-config\" , defaultUser = \"root\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None imageId str ImageId to be used to setup the compute instance. required sshKeys List [ int ] Array of secretIds of public SSH keys for logging into as defaultUser with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API. None rootPassword int secretId of the password for the defaultUser with administrator/root privileges. For Linux/BSD please use SSH, for Windows RDP. Please refer to Secrets Management API. None userData str Cloud-Init Config in order to customize during start of compute instance. None defaultUser str Default user name created for login during (re-)installation with administrative privileges. Allowed values for Linux/BSD are admin (use sudo to apply administrative privileges like root) or root . Allowed values for Windows are admin (has administrative privileges like administrator) or administrator . None Returns: Type Description bool Bool respresenting if the instance has been succesfully reinstalled. Source code in pyContabo/Instance.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 def reinstall ( self , imageId : str , sshKeys : List [ int ] = None , rootPassword : int = None , userData : str = None , defaultUser : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"reinstall a specific instance with a new image and optionally add ssh keys, a root password or cloud-init. Examples: >>> instance.reinstall(imageId=\"3f184ab8-a600-4e7c-8c9b-3413e21a3752\", sshKeys=\"[123, 125]\", rootPassword=1, userData=\"#cloud-config\", defaultUser=\"root\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. imageId: ImageId to be used to setup the compute instance. sshKeys: Array of `secretIds` of public SSH keys for logging into as `defaultUser` with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API. rootPassword: `secretId` of the password for the `defaultUser` with administrator/root privileges. For Linux/BSD please use SSH, for Windows RDP. Please refer to Secrets Management API. userData: Cloud-Init Config in order to customize during start of compute instance. defaultUser: Default user name created for login during (re-)installation with administrative privileges. Allowed values for Linux/BSD are `admin` (use sudo to apply administrative privileges like root) or `root`. Allowed values for Windows are `admin` (has administrative privileges like administrator) or `administrator`. Returns: Bool respresenting if the instance has been succesfully reinstalled. \"\"\" resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/compute/instances/ { str ( self . instanceId ) } \" , data = { \"imageId\" : imageId , \"sshKeys\" : sshKeys , \"rootPassword\" : rootPassword , \"userData\" : userData , \"defaultUser\" : defaultUser , }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False restart restart ( x_request_id = None , x_trace_id = None ) Restart a compute instance / resource. Examples: >>> instance . restart () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the instance/ressource has been succesfully restarted. Source code in pyContabo/Instance.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def restart ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Restart a compute instance / resource. Examples: >>> instance.restart() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the instance/ressource has been succesfully restarted. \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/instances/ { str ( self . instanceId ) } /actions/restart\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False start start ( x_request_id = None , x_trace_id = None ) Start a compute instance / resource. Examples: >>> instance . start () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the instance/ressource has been succesfully started. Source code in pyContabo/Instance.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def start ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Start a compute instance / resource. Examples: >>> instance.start() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the instance/ressource has been succesfully started. \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/instances/ { str ( self . instanceId ) } /actions/start\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False stop stop ( x_request_id = None , x_trace_id = None ) stop a compute instance / resource. Examples: >>> instance . stop () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the instance/ressource has been succesfully stopped. Source code in pyContabo/Instance.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def stop ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"stop a compute instance / resource. Examples: >>> instance.stop() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the instance/ressource has been succesfully stopped. \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/instances/ { str ( self . instanceId ) } /actions/stop\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False InstancesAudits InstancesAudits ( _http ) Source code in pyContabo/audits/InstancesAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http get get ( page = None , pageSize = None , orderBy = None , instanceId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> Instances . Audits . get () [InstancesAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None instanceId int The identifier of the instance. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ InstancesAudit ] List of InstancesAudit Source code in pyContabo/audits/InstancesAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , instanceId : int = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ InstancesAudit ]: \"\"\"fetches audits Examples: >>> Instances.Audits.get() [InstancesAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` instanceId: The identifier of the instance. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of InstancesAudit \"\"\" url = f \"https://api.contabo.com/v1/compute/instances/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( InstancesAudit ( i )) return audits else : return [] InstanceActionsAudits InstanceActionsAudits ( _http ) Source code in pyContabo/audits/InstanceActionsAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http get get ( page = None , pageSize = None , orderBy = None , instanceId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> instance . Audits . get () [InstanceActionsAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None instanceId int The identifier of the instance. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ InstanceActionsAudit ] List of InstanceActionsAudit Source code in pyContabo/audits/InstanceActionsAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , instanceId : int = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ InstanceActionsAudit ]: \"\"\"fetches audits Examples: >>> instance.Audits.get() [InstanceActionsAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` instanceId: The identifier of the instance. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of InstanceActionsAudit \"\"\" url = f \"https://api.contabo.com/v1/compute/instances/actions/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( InstanceActionsAudit ( i )) return audits else : return []","title":"Instances"},{"location":"instances/#pyContabo.Instances.Instances","text":"Instances ( _http ) Source code in pyContabo/Instances.py 16 17 18 19 def __init__ ( self , _http ): self . Audits = InstancesAudits ( _http ) self . _http = _http","title":"Instances"},{"location":"instances/#pyContabo.Instances.Instances.create","text":"create ( imageId , productId , region , period , sshKeys = [], rootPassword = \"\" , userData = \"\" , licenseName = None , displayName = None , defaultUser = None , x_request_id = None , x_trace_id = None , ) Creates a new instance Examples: >>> Instances . create ( imageId = \"db1409d2-ed92-4f2f-978e-7b2fa4a1ec90\" , productId = product . P1 , region = region . EU , period = \"1\" , licenseName = license . cPanel5 ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None imageId str ImageId to be used to setup the compute instance. Default is Ubuntu 20.04. required productId product Product ID. Default is V1. required region region Instance Region where the compute instance should be located. Default is EU. required sshKeys List [ int ] Array of secretIds of public SSH keys for logging into as defaultUser with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API. [] rootPassword str secretId of the password for the defaultUser with administrator/root privileges. For Linux/BSD please use SSH, for Windows RDP. Please refer to Secrets Management API. '' userData str Cloud-Init Config in order to customize during start of compute instance. '' licenseName license Additional licence in order to enhance your chosen product, mainly needed for software licenses on your product (not needed for windows). None period int Initial contract period in months. Available periods are: 1, 3, 6 and 12 months. Default to 1 month required displayName str The display name of the instance None defaultUser str Default user name created for login during (re-)installation with administrative privileges. Allowed values for Linux/BSD are admin (use sudo to apply administrative privileges like root) or root . Allowed values for Windows are admin (has administrative privileges like administrator) or administrator . None Returns: Type Description bool Bool respresenting if the instance has been succesfully created. Source code in pyContabo/Instances.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 def create ( self , imageId : str , productId : product , region : region , period : int , sshKeys : List [ int ] = [], rootPassword : str = \"\" , userData : str = \"\" , licenseName : license = None , displayName : str = None , defaultUser : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Creates a new instance Examples: >>> Instances.create(imageId=\"db1409d2-ed92-4f2f-978e-7b2fa4a1ec90\", productId=product.P1, region=region.EU, period=\"1\", licenseName=license.cPanel5) True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. imageId: ImageId to be used to setup the compute instance. Default is Ubuntu 20.04. productId: Product ID. Default is V1. region: Instance Region where the compute instance should be located. Default is EU. sshKeys: Array of `secretIds` of public SSH keys for logging into as `defaultUser` with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API. rootPassword: `secretId` of the password for the `defaultUser` with administrator/root privileges. For Linux/BSD please use SSH, for Windows RDP. Please refer to Secrets Management API. userData: Cloud-Init Config in order to customize during start of compute instance. licenseName: Additional licence in order to enhance your chosen product, mainly needed for software licenses on your product (not needed for windows). period: Initial contract period in months. Available periods are: 1, 3, 6 and 12 months. Default to 1 month displayName: The display name of the instance defaultUser: Default user name created for login during (re-)installation with administrative privileges. Allowed values for Linux/BSD are `admin` (use sudo to apply administrative privileges like root) or `root`. Allowed values for Windows are `admin` (has administrative privileges like administrator) or `administrator`. Returns: Bool respresenting if the instance has been succesfully created. \"\"\" resp = self . _http . request ( type = \"post\" , url = \"https://api.contabo.com/v1/compute/instances\" , data = { \"imageId\" : imageId , \"productId\" : productId . name , \"region\" : region . name , \"sshKeys\" : sshKeys , \"rootPassword\" : rootPassword , \"userData\" : userData , \"license\" : licenseName . name , \"period\" : period , \"displayName\" : displayName , \"defaultUser\" : defaultUser , }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) # _log.info(\"created new instance with imageId=%s productId=%s region=%s period=%s sshKeys=%s rootPassword=%s userData=%s, licenseName=%s\", imageId, productId, region, period, sshKeys, rootPassword, userData, licenseName) if resp . status_code == 201 : return True return False","title":"create()"},{"location":"instances/#pyContabo.Instances.Instances.get","text":"get ( id = None , page = None , pageSize = None , orderBy = None , name = None , region = None , instanceIds = None , status = None , x_request_id = None , x_trace_id = None , ) fetches any instances(s) by id or other parameters Examples: >>> Instances . get () [instance] >>> Instances . get ( name = \"vmd12345\" , region = \"EU\" , status = \"provisioning\" ) [instance] >>> Instances . get ( id = \"100\" ) instance Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the instance None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None name str The name of the instance None region str The Region of the instance None instanceIds str Comma separated instances identifiers None status str The status of the instance None Returns: Type Description Union [ Instance , List [ Instance ]] List of instances Source code in pyContabo/Instances.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def get ( self , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , name : str = None , region : str = None , instanceIds : str = None , status : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Instance , List [ Instance ]]: \"\"\"fetches any instances(s) by id or other parameters Examples: >>> Instances.get() [instance] >>> Instances.get(name=\"vmd12345\", region=\"EU\", status=\"provisioning\") [instance] >>> Instances.get(id=\"100\") instance Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the instance page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` name: The name of the instance region: The Region of the instance instanceIds: Comma separated instances identifiers status: The status of the instance Returns: List of instances \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/compute/instances/ { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] # _log.info(\"fetched instance with id=%s\", id) return Instance ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/compute/instances? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'name= { name } &' if name is not None else '' }{ f 'region= { region } &' if region is not None else '' }{ f 'instanceIds= { instanceIds } &' if instanceIds is not None else '' }{ f 'status= { status } &' if status is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] instances = [] for i in data : instances . append ( Instance ( i , self . _http )) # _log.info(\"fetched %s instances with page=%s pageSize=%s orderByField=%s orderBy=%s name=%s region=%s instanceId=%s status=%s\", len(instances), page, pageSize, orderByField, orderBy, name, region, instanceId, status) return instances","title":"get()"},{"location":"instances/#pyContabo.Instance.Instance","text":"Instance ( json , _http ) Source code in pyContabo/Instance.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . name = json [ \"name\" ] self . instanceId = json [ \"instanceId\" ] self . region = json [ \"region\" ] self . ipv4 = json [ \"ipConfig\" ][ \"v4\" ][ \"ip\" ] self . ipv6 = json [ \"ipConfig\" ][ \"v6\" ][ \"ip\" ] self . macAddress = json [ \"macAddress\" ] self . ramMb = json [ \"ramMb\" ] self . cpuCores = json [ \"cpuCores\" ] self . osType = json [ \"osType\" ] self . diskMb = json [ \"diskMb\" ] self . createdDate = json [ \"createdDate\" ] self . cancelDate = json [ \"cancelDate\" ] self . status = json [ \"status\" ] self . vHostId = json [ \"vHostId\" ] self . addOns = json [ \"addOns\" ] self . productType = json [ \"productType\" ] self . rawJson = json self . Snapshots = Snapshots ( json [ \"instanceId\" ], _http ) self . Audits = InstanceActionsAudits ( _http )","title":"Instance"},{"location":"instances/#pyContabo.Instance.Instance.cancel","text":"cancel ( x_request_id = None , x_trace_id = None ) Cancel a compute instance. Examples: >>> instance . cancel () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the instance has been succesfully cancelled. Source code in pyContabo/Instance.py 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 def cancel ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Cancel a compute instance. Examples: >>> instance.cancel() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the instance has been succesfully cancelled. \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/instances/ { str ( self . instanceId ) } /cancel\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False","title":"cancel()"},{"location":"instances/#pyContabo.Instance.Instance.reinstall","text":"reinstall ( imageId , sshKeys = None , rootPassword = None , userData = None , defaultUser = None , x_request_id = None , x_trace_id = None , ) reinstall a specific instance with a new image and optionally add ssh keys, a root password or cloud-init. Examples: >>> instance . reinstall ( imageId = \"3f184ab8-a600-4e7c-8c9b-3413e21a3752\" , sshKeys = \"[123, 125]\" , rootPassword = 1 , userData = \"#cloud-config\" , defaultUser = \"root\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None imageId str ImageId to be used to setup the compute instance. required sshKeys List [ int ] Array of secretIds of public SSH keys for logging into as defaultUser with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API. None rootPassword int secretId of the password for the defaultUser with administrator/root privileges. For Linux/BSD please use SSH, for Windows RDP. Please refer to Secrets Management API. None userData str Cloud-Init Config in order to customize during start of compute instance. None defaultUser str Default user name created for login during (re-)installation with administrative privileges. Allowed values for Linux/BSD are admin (use sudo to apply administrative privileges like root) or root . Allowed values for Windows are admin (has administrative privileges like administrator) or administrator . None Returns: Type Description bool Bool respresenting if the instance has been succesfully reinstalled. Source code in pyContabo/Instance.py 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 def reinstall ( self , imageId : str , sshKeys : List [ int ] = None , rootPassword : int = None , userData : str = None , defaultUser : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"reinstall a specific instance with a new image and optionally add ssh keys, a root password or cloud-init. Examples: >>> instance.reinstall(imageId=\"3f184ab8-a600-4e7c-8c9b-3413e21a3752\", sshKeys=\"[123, 125]\", rootPassword=1, userData=\"#cloud-config\", defaultUser=\"root\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. imageId: ImageId to be used to setup the compute instance. sshKeys: Array of `secretIds` of public SSH keys for logging into as `defaultUser` with administrator/root privileges. Applies to Linux/BSD systems. Please refer to Secrets Management API. rootPassword: `secretId` of the password for the `defaultUser` with administrator/root privileges. For Linux/BSD please use SSH, for Windows RDP. Please refer to Secrets Management API. userData: Cloud-Init Config in order to customize during start of compute instance. defaultUser: Default user name created for login during (re-)installation with administrative privileges. Allowed values for Linux/BSD are `admin` (use sudo to apply administrative privileges like root) or `root`. Allowed values for Windows are `admin` (has administrative privileges like administrator) or `administrator`. Returns: Bool respresenting if the instance has been succesfully reinstalled. \"\"\" resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/compute/instances/ { str ( self . instanceId ) } \" , data = { \"imageId\" : imageId , \"sshKeys\" : sshKeys , \"rootPassword\" : rootPassword , \"userData\" : userData , \"defaultUser\" : defaultUser , }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False","title":"reinstall()"},{"location":"instances/#pyContabo.Instance.Instance.restart","text":"restart ( x_request_id = None , x_trace_id = None ) Restart a compute instance / resource. Examples: >>> instance . restart () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the instance/ressource has been succesfully restarted. Source code in pyContabo/Instance.py 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def restart ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Restart a compute instance / resource. Examples: >>> instance.restart() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the instance/ressource has been succesfully restarted. \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/instances/ { str ( self . instanceId ) } /actions/restart\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False","title":"restart()"},{"location":"instances/#pyContabo.Instance.Instance.start","text":"start ( x_request_id = None , x_trace_id = None ) Start a compute instance / resource. Examples: >>> instance . start () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the instance/ressource has been succesfully started. Source code in pyContabo/Instance.py 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def start ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Start a compute instance / resource. Examples: >>> instance.start() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the instance/ressource has been succesfully started. \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/instances/ { str ( self . instanceId ) } /actions/start\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False","title":"start()"},{"location":"instances/#pyContabo.Instance.Instance.stop","text":"stop ( x_request_id = None , x_trace_id = None ) stop a compute instance / resource. Examples: >>> instance . stop () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the instance/ressource has been succesfully stopped. Source code in pyContabo/Instance.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 def stop ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"stop a compute instance / resource. Examples: >>> instance.stop() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the instance/ressource has been succesfully stopped. \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/instances/ { str ( self . instanceId ) } /actions/stop\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False","title":"stop()"},{"location":"instances/#pyContabo.audits.InstancesAudits.InstancesAudits","text":"InstancesAudits ( _http ) Source code in pyContabo/audits/InstancesAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http","title":"InstancesAudits"},{"location":"instances/#pyContabo.audits.InstancesAudits.InstancesAudits.get","text":"get ( page = None , pageSize = None , orderBy = None , instanceId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> Instances . Audits . get () [InstancesAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None instanceId int The identifier of the instance. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ InstancesAudit ] List of InstancesAudit Source code in pyContabo/audits/InstancesAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , instanceId : int = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ InstancesAudit ]: \"\"\"fetches audits Examples: >>> Instances.Audits.get() [InstancesAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` instanceId: The identifier of the instance. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of InstancesAudit \"\"\" url = f \"https://api.contabo.com/v1/compute/instances/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( InstancesAudit ( i )) return audits else : return []","title":"get()"},{"location":"instances/#pyContabo.audits.InstanceActionsAudits.InstanceActionsAudits","text":"InstanceActionsAudits ( _http ) Source code in pyContabo/audits/InstanceActionsAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http","title":"InstanceActionsAudits"},{"location":"instances/#pyContabo.audits.InstanceActionsAudits.InstanceActionsAudits.get","text":"get ( page = None , pageSize = None , orderBy = None , instanceId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> instance . Audits . get () [InstanceActionsAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None instanceId int The identifier of the instance. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ InstanceActionsAudit ] List of InstanceActionsAudit Source code in pyContabo/audits/InstanceActionsAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , instanceId : int = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ InstanceActionsAudit ]: \"\"\"fetches audits Examples: >>> instance.Audits.get() [InstanceActionsAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` instanceId: The identifier of the instance. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of InstanceActionsAudit \"\"\" url = f \"https://api.contabo.com/v1/compute/instances/actions/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( InstanceActionsAudit ( i )) return audits else : return []","title":"get()"},{"location":"roles/","text":"Roles Roles ( _http ) Source code in pyContabo/Roles.py 10 11 12 13 def __init__ ( self , _http ): self . _http = _http self . Audits = RolesAudits ( _http ) create create ( roleType , name , admin , accessAllResources , apiPermissions = None , x_request_id = None , x_trace_id = None , ) Creates a new role Examples: >>> Roles . create ( name = \"Web\" , admin = True , accessAllResources = True , apiPermissions = [ apiPermission ( \"infrastructure\" , [ \"CREATE\" , \"READ\" ], resources = [ 1 , 2 , 3 ])]) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the role. There is a limit of 255 characters per role. required admin bool If user is admin he will have permissions to all API endpoints and resources. Enabling this will superseed all role definitions and accessAllResources . required accessAllResources bool Allow access to all resources. This will superseed all assigned resources in a role. required apiPermissions List [ apiPermission ] Array of apiPermissions. None Returns: Type Description bool Bool respresenting if the role has been succesfully created. Source code in pyContabo/Roles.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def create ( self , roleType : str , name : str , admin : bool , accessAllResources : bool , apiPermissions : List [ apiPermission ] = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Creates a new role Examples: >>> Roles.create(name=\"Web\", admin=True, accessAllResources=True, apiPermissions=[apiPermission(\"infrastructure\", [\"CREATE\", \"READ\"], resources=[1, 2, 3])]) True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the role. There is a limit of 255 characters per role. admin: If user is admin he will have permissions to all API endpoints and resources. Enabling this will superseed all role definitions and `accessAllResources`. accessAllResources: Allow access to all resources. This will superseed all assigned resources in a role. apiPermissions: Array of apiPermissions. Returns: Bool respresenting if the role has been succesfully created. \"\"\" data = { \"name\" : name , \"admin\" : admin , \"accessAllResources\" : accessAllResources } if apiPermissions : data [ \"apiPermissions\" ] = [] for i in apiPermissions : data [ \"apiPermissions\" ] . append ( i . __dict__ ) resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/roles/ { roleType } \" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False get get ( roleType , id = None , page = None , pageSize = None , orderBy = None , name = None , apiName = None , tagName = None , type = None , x_request_id = None , x_trace_id = None , ) fetches any role(s) by id or other parameters Examples: >>> Roles . get () [role] >>> Roles . get ( name = \"roleName\" , apiName = \"/v1/compute/instances\" , tagName = \"Web\" , type = \"custom\" ) [role] >>> Roles . get ( id = \"12345\" ) role Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the role. None name str The name of the role. None apiName str The name of api. None tagName str The name of the tag None type str The type of the tag. Can be either default or custom None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None Returns: Type Description Union [ Role , List [ Role ]] List of roles Source code in pyContabo/Roles.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def get ( self , roleType : str , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , name : str = None , apiName : str = None , tagName : str = None , type : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Role , List [ Role ]]: \"\"\"fetches any role(s) by id or other parameters Examples: >>> Roles.get() [role] >>> Roles.get(name=\"roleName\", apiName=\"/v1/compute/instances\", tagName=\"Web\", type=\"custom\") [role] >>> Roles.get(id=\"12345\") role Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the role. name: The name of the role. apiName: The name of api. tagName: The name of the tag type: The type of the tag. Can be either `default` or `custom` page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` Returns: List of roles \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/roles/ { roleType } / { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return Role ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/roles/ { roleType } ? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'name= { name } &' if name is not None else '' }{ f 'apiName= { apiName } &' if apiName is not None else '' }{ f 'tagName= { tagName } &' if tagName is not None else '' }{ f 'type= { type } &' if type is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] roles = [] for i in resp . json ()[ \"data\" ]: roles . append ( Role ( i , self . _http )) return roles getApiPermissions getApiPermissions ( page = None , pageSize = None , orderBy = None , apiName = None , x_request_id = None , x_trace_id = None , ) List all available API permissions. Examples: >>> Roles . getApiPermissions ( apiName = \"/v1/compute/instances\" ) [permissions] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None apiName str The name of api. None Returns: Type Description List [ apiPermission ] List of permissions. Source code in pyContabo/Roles.py 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 def getApiPermissions ( self , page : int = None , pageSize : int = None , orderBy : str = None , apiName : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ apiPermission ]: \"\"\"List all available API permissions. Examples: >>> Roles.getApiPermissions(apiName=\"/v1/compute/instances\") [permissions] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` apiName: The name of api. Returns: List of permissions. \"\"\" url = f \"https://api.contabo.com/v1/roles/api-permissions? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'apiName= { apiName } &' if apiName is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] permissions = [] for i in resp . json ()[ \"data\" ]: permissions . append ( apiPermission ( i [ \"apiName\" ], i [ \"actions\" ])) return permissions Role Role ( json , _http ) Source code in pyContabo/Role.py 6 7 8 9 10 11 12 13 14 15 16 17 18 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . roleId = json [ \"roleId\" ] self . name = json [ \"name\" ] self . roleType = json [ \"roleType\" ] self . apiPermissions = [] self . resourcePermissions = [] self . rawJson = json delete delete ( x_request_id = None , x_trace_id = None ) deletes the image Examples: >>> role . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the role has been succesfully deleted. Source code in pyContabo/Role.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the image Examples: >>> role.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the role has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/roles/ { self . roleType } / { self . roleId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False update update ( name , admin , accessAllResources , apiPermissions = None , x_request_id = None , x_trace_id = None , ) Update attributes to your role. Attributes are optional. If not set, the attributes will retain their original values. Examples: >>> role . update ( name = \"aRole\" , admin = True , accessAllResources = True , apiPermissions = apiPermissions ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the role. There is a limit of 255 characters per role. required admin bool If user is admin he will have permissions to all API endpoints and resources. Enabling this will superseed all role definitions and accessAllResources . required accessAllResources bool Allow access to all resources. This will superseed all assigned resources in a role required apiPermissions List [ apiPermissions ] Array of apiPermissions None Returns: Type Description bool Bool respresenting if the role has been succesfully updated. Source code in pyContabo/Role.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def update ( self , name : str , admin : bool , accessAllResources : bool , apiPermissions : List [ apiPermissions ] = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Update attributes to your role. Attributes are optional. If not set, the attributes will retain their original values. Examples: >>> role.update(name=\"aRole\", admin=True, accessAllResources=True, apiPermissions=apiPermissions) True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the role. There is a limit of 255 characters per role. admin: If user is admin he will have permissions to all API endpoints and resources. Enabling this will superseed all role definitions and `accessAllResources`. accessAllResources: Allow access to all resources. This will superseed all assigned resources in a role apiPermissions: Array of apiPermissions Returns: Bool respresenting if the role has been succesfully updated. \"\"\" data = { \"name\" : name , \"admin\" : admin , \"accessAllResources\" : accessAllResources } if apiPermissions : data [ \"apiPermissions\" ] = [] for i in apiPermissions : data [ \"apiPermissions\" ] . append ( i . __dict__ ) resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/roles/ { self . roleType } / { self . roleId } \" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False RolesAudits RolesAudits ( _http ) Source code in pyContabo/audits/RolesAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http get get ( page = None , pageSize = None , orderBy = None , roleId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> Roles . Audits . get () [RolesAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None roleId int The identifier of the role. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ RolesAudit ] List of RolesAudit Source code in pyContabo/audits/RolesAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , roleId : int = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ RolesAudit ]: \"\"\"fetches audits Examples: >>> Roles.Audits.get() [RolesAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` roleId: The identifier of the role. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of RolesAudit \"\"\" url = f \"https://api.contabo.com/v1/tags/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'roleId= { roleId } &' if roleId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( RolesAudit ( i )) return audits else : return []","title":"Roles"},{"location":"roles/#pyContabo.Roles.Roles","text":"Roles ( _http ) Source code in pyContabo/Roles.py 10 11 12 13 def __init__ ( self , _http ): self . _http = _http self . Audits = RolesAudits ( _http )","title":"Roles"},{"location":"roles/#pyContabo.Roles.Roles.create","text":"create ( roleType , name , admin , accessAllResources , apiPermissions = None , x_request_id = None , x_trace_id = None , ) Creates a new role Examples: >>> Roles . create ( name = \"Web\" , admin = True , accessAllResources = True , apiPermissions = [ apiPermission ( \"infrastructure\" , [ \"CREATE\" , \"READ\" ], resources = [ 1 , 2 , 3 ])]) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the role. There is a limit of 255 characters per role. required admin bool If user is admin he will have permissions to all API endpoints and resources. Enabling this will superseed all role definitions and accessAllResources . required accessAllResources bool Allow access to all resources. This will superseed all assigned resources in a role. required apiPermissions List [ apiPermission ] Array of apiPermissions. None Returns: Type Description bool Bool respresenting if the role has been succesfully created. Source code in pyContabo/Roles.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 def create ( self , roleType : str , name : str , admin : bool , accessAllResources : bool , apiPermissions : List [ apiPermission ] = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Creates a new role Examples: >>> Roles.create(name=\"Web\", admin=True, accessAllResources=True, apiPermissions=[apiPermission(\"infrastructure\", [\"CREATE\", \"READ\"], resources=[1, 2, 3])]) True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the role. There is a limit of 255 characters per role. admin: If user is admin he will have permissions to all API endpoints and resources. Enabling this will superseed all role definitions and `accessAllResources`. accessAllResources: Allow access to all resources. This will superseed all assigned resources in a role. apiPermissions: Array of apiPermissions. Returns: Bool respresenting if the role has been succesfully created. \"\"\" data = { \"name\" : name , \"admin\" : admin , \"accessAllResources\" : accessAllResources } if apiPermissions : data [ \"apiPermissions\" ] = [] for i in apiPermissions : data [ \"apiPermissions\" ] . append ( i . __dict__ ) resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/roles/ { roleType } \" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False","title":"create()"},{"location":"roles/#pyContabo.Roles.Roles.get","text":"get ( roleType , id = None , page = None , pageSize = None , orderBy = None , name = None , apiName = None , tagName = None , type = None , x_request_id = None , x_trace_id = None , ) fetches any role(s) by id or other parameters Examples: >>> Roles . get () [role] >>> Roles . get ( name = \"roleName\" , apiName = \"/v1/compute/instances\" , tagName = \"Web\" , type = \"custom\" ) [role] >>> Roles . get ( id = \"12345\" ) role Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the role. None name str The name of the role. None apiName str The name of api. None tagName str The name of the tag None type str The type of the tag. Can be either default or custom None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None Returns: Type Description Union [ Role , List [ Role ]] List of roles Source code in pyContabo/Roles.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def get ( self , roleType : str , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , name : str = None , apiName : str = None , tagName : str = None , type : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Role , List [ Role ]]: \"\"\"fetches any role(s) by id or other parameters Examples: >>> Roles.get() [role] >>> Roles.get(name=\"roleName\", apiName=\"/v1/compute/instances\", tagName=\"Web\", type=\"custom\") [role] >>> Roles.get(id=\"12345\") role Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the role. name: The name of the role. apiName: The name of api. tagName: The name of the tag type: The type of the tag. Can be either `default` or `custom` page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` Returns: List of roles \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/roles/ { roleType } / { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return Role ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/roles/ { roleType } ? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'name= { name } &' if name is not None else '' }{ f 'apiName= { apiName } &' if apiName is not None else '' }{ f 'tagName= { tagName } &' if tagName is not None else '' }{ f 'type= { type } &' if type is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] roles = [] for i in resp . json ()[ \"data\" ]: roles . append ( Role ( i , self . _http )) return roles","title":"get()"},{"location":"roles/#pyContabo.Roles.Roles.getApiPermissions","text":"getApiPermissions ( page = None , pageSize = None , orderBy = None , apiName = None , x_request_id = None , x_trace_id = None , ) List all available API permissions. Examples: >>> Roles . getApiPermissions ( apiName = \"/v1/compute/instances\" ) [permissions] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None apiName str The name of api. None Returns: Type Description List [ apiPermission ] List of permissions. Source code in pyContabo/Roles.py 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 def getApiPermissions ( self , page : int = None , pageSize : int = None , orderBy : str = None , apiName : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ apiPermission ]: \"\"\"List all available API permissions. Examples: >>> Roles.getApiPermissions(apiName=\"/v1/compute/instances\") [permissions] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` apiName: The name of api. Returns: List of permissions. \"\"\" url = f \"https://api.contabo.com/v1/roles/api-permissions? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'apiName= { apiName } &' if apiName is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] permissions = [] for i in resp . json ()[ \"data\" ]: permissions . append ( apiPermission ( i [ \"apiName\" ], i [ \"actions\" ])) return permissions","title":"getApiPermissions()"},{"location":"roles/#pyContabo.Role.Role","text":"Role ( json , _http ) Source code in pyContabo/Role.py 6 7 8 9 10 11 12 13 14 15 16 17 18 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . roleId = json [ \"roleId\" ] self . name = json [ \"name\" ] self . roleType = json [ \"roleType\" ] self . apiPermissions = [] self . resourcePermissions = [] self . rawJson = json","title":"Role"},{"location":"roles/#pyContabo.Role.Role.delete","text":"delete ( x_request_id = None , x_trace_id = None ) deletes the image Examples: >>> role . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the role has been succesfully deleted. Source code in pyContabo/Role.py 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the image Examples: >>> role.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the role has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/roles/ { self . roleType } / { self . roleId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False","title":"delete()"},{"location":"roles/#pyContabo.Role.Role.update","text":"update ( name , admin , accessAllResources , apiPermissions = None , x_request_id = None , x_trace_id = None , ) Update attributes to your role. Attributes are optional. If not set, the attributes will retain their original values. Examples: >>> role . update ( name = \"aRole\" , admin = True , accessAllResources = True , apiPermissions = apiPermissions ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the role. There is a limit of 255 characters per role. required admin bool If user is admin he will have permissions to all API endpoints and resources. Enabling this will superseed all role definitions and accessAllResources . required accessAllResources bool Allow access to all resources. This will superseed all assigned resources in a role required apiPermissions List [ apiPermissions ] Array of apiPermissions None Returns: Type Description bool Bool respresenting if the role has been succesfully updated. Source code in pyContabo/Role.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 def update ( self , name : str , admin : bool , accessAllResources : bool , apiPermissions : List [ apiPermissions ] = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Update attributes to your role. Attributes are optional. If not set, the attributes will retain their original values. Examples: >>> role.update(name=\"aRole\", admin=True, accessAllResources=True, apiPermissions=apiPermissions) True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the role. There is a limit of 255 characters per role. admin: If user is admin he will have permissions to all API endpoints and resources. Enabling this will superseed all role definitions and `accessAllResources`. accessAllResources: Allow access to all resources. This will superseed all assigned resources in a role apiPermissions: Array of apiPermissions Returns: Bool respresenting if the role has been succesfully updated. \"\"\" data = { \"name\" : name , \"admin\" : admin , \"accessAllResources\" : accessAllResources } if apiPermissions : data [ \"apiPermissions\" ] = [] for i in apiPermissions : data [ \"apiPermissions\" ] . append ( i . __dict__ ) resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/roles/ { self . roleType } / { self . roleId } \" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False","title":"update()"},{"location":"roles/#pyContabo.audits.RolesAudits.RolesAudits","text":"RolesAudits ( _http ) Source code in pyContabo/audits/RolesAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http","title":"RolesAudits"},{"location":"roles/#pyContabo.audits.RolesAudits.RolesAudits.get","text":"get ( page = None , pageSize = None , orderBy = None , roleId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> Roles . Audits . get () [RolesAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None roleId int The identifier of the role. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ RolesAudit ] List of RolesAudit Source code in pyContabo/audits/RolesAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , roleId : int = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ RolesAudit ]: \"\"\"fetches audits Examples: >>> Roles.Audits.get() [RolesAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` roleId: The identifier of the role. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of RolesAudit \"\"\" url = f \"https://api.contabo.com/v1/tags/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'roleId= { roleId } &' if roleId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( RolesAudit ( i )) return audits else : return []","title":"get()"},{"location":"secrets/","text":"Secrets Secrets ( _http ) Source code in pyContabo/Secrets.py 9 10 11 12 def __init__ ( self , _http ): self . _http = _http self . Audits = SecretsAudits ( _http ) create create ( name , value , type , x_request_id = None , x_trace_id = None ) Creates a new secret Examples: >>> Secrets . create ( name = \"aName\" , value = \"12345678\" , type = \"password\" , period = \"1\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the secret. required value str The secret value that needs to be saved. required type str The type of the secret. Can be password or ssh . required Returns: Type Description bool Bool respresenting if the secret has been succesfully created. Source code in pyContabo/Secrets.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def create ( self , name : str , value : str , type : str , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Creates a new secret Examples: >>> Secrets.create(name=\"aName\", value=\"12345678\", type=\"password\", period=\"1\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the secret. value: The secret value that needs to be saved. type: The type of the secret. Can be `password` or `ssh`. Returns: Bool respresenting if the secret has been succesfully created. \"\"\" data = json . dumps ({ \"name\" : name , \"value\" : value , \"type\" : type }) resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/secrets\" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False get get ( id = None , page = None , pageSize = None , orderBy = None , name = None , type = None , x_request_id = None , x_trace_id = None , ) fetches any secret(s) by id or other parameters Examples: >>> Secrets . get () [secret] >>> Secrets . get ( name = \"mysecret\" , type = \"password\" ) [secret] >>> Secrets . get ( id = \"100\" ) secret Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the secret None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None name str The name of the instance. None type str The type of the secret. Can be password or ssh . None Returns: Type Description Union [ Secret , List [ Secret ]] List of secrets Source code in pyContabo/Secrets.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def get ( self , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , name : str = None , type : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Secret , List [ Secret ]]: \"\"\"fetches any secret(s) by id or other parameters Examples: >>> Secrets.get() [secret] >>> Secrets.get(name=\"mysecret\", type=\"password\") [secret] >>> Secrets.get(id=\"100\") secret Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the secret page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` name: The name of the instance. type: The type of the secret. Can be `password` or `ssh`. Returns: List of secrets \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/secrets/ { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return Secret ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/secrets? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'name= { name } &' if name is not None else '' }{ f 'name= { type } &' if type is not None else '' } \" url = url [: - 1 ] # Remove the \"?\" at the end of the url resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] secrets = [] for i in resp . json ()[ \"data\" ]: secrets . append ( Secret ( i , self . _http )) return secrets Secret Secret ( json , _http ) Source code in pyContabo/Secret.py 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . secretId = json [ \"secretId\" ] self . name = json [ \"name\" ] self . type = json [ \"type\" ] self . value = json [ \"value\" ] self . createdAt = json [ \"createdAt\" ] self . updatedAt = json [ \"updatedAt\" ] self . rawJson = json delete delete ( x_request_id = None , x_trace_id = None ) deletes the secret Examples: >>> secret . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the secret has been succesfully deleted. Source code in pyContabo/Secret.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the secret Examples: >>> secret.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the secret has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/secrets/ { self . secretId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False update update ( name , value , x_request_id = None , x_trace_id = None ) Update attributes to your secret. Attributes are optional. If not set, the attributes will retain their original values. Only name and value can be updated. Examples: >>> secret . update ( name = \"name\" , value = \"12345678\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the secret to be saved required value str The value of the secret to be saved required Returns: Type Description bool Bool respresenting if the secret has been succesfully updated. Source code in pyContabo/Secret.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def update ( self , name : str , value : str , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Update attributes to your secret. Attributes are optional. If not set, the attributes will retain their original values. Only name and value can be updated. Examples: >>> secret.update(name=\"name\", value=\"12345678\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the secret to be saved value: The value of the secret to be saved Returns: Bool respresenting if the secret has been succesfully updated. \"\"\" resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/secrets/ { self . secretId } \" , data = { \"name\" : name , \"value\" : value }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False SecretsAudits SecretsAudits ( _http ) Source code in pyContabo/audits/SecretsAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http get get ( page = None , pageSize = None , orderBy = None , secretId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> Secrets . Audits . get () [SecretsAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None secretId int The identifier of the secret. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ SecretsAudit ] List of SecretsAudit Source code in pyContabo/audits/SecretsAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , secretId : int = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ SecretsAudit ]: \"\"\"fetches audits Examples: >>> Secrets.Audits.get() [SecretsAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` secretId: The identifier of the secret. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of SecretsAudit \"\"\" url = f \"https://api.contabo.com/v1/secrets/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'secretId= { secretId } &' if secretId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( SecretsAudit ( i )) return audits else : return []","title":"Secrets"},{"location":"secrets/#pyContabo.Secrets.Secrets","text":"Secrets ( _http ) Source code in pyContabo/Secrets.py 9 10 11 12 def __init__ ( self , _http ): self . _http = _http self . Audits = SecretsAudits ( _http )","title":"Secrets"},{"location":"secrets/#pyContabo.Secrets.Secrets.create","text":"create ( name , value , type , x_request_id = None , x_trace_id = None ) Creates a new secret Examples: >>> Secrets . create ( name = \"aName\" , value = \"12345678\" , type = \"password\" , period = \"1\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the secret. required value str The secret value that needs to be saved. required type str The type of the secret. Can be password or ssh . required Returns: Type Description bool Bool respresenting if the secret has been succesfully created. Source code in pyContabo/Secrets.py 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def create ( self , name : str , value : str , type : str , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Creates a new secret Examples: >>> Secrets.create(name=\"aName\", value=\"12345678\", type=\"password\", period=\"1\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the secret. value: The secret value that needs to be saved. type: The type of the secret. Can be `password` or `ssh`. Returns: Bool respresenting if the secret has been succesfully created. \"\"\" data = json . dumps ({ \"name\" : name , \"value\" : value , \"type\" : type }) resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/secrets\" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False","title":"create()"},{"location":"secrets/#pyContabo.Secrets.Secrets.get","text":"get ( id = None , page = None , pageSize = None , orderBy = None , name = None , type = None , x_request_id = None , x_trace_id = None , ) fetches any secret(s) by id or other parameters Examples: >>> Secrets . get () [secret] >>> Secrets . get ( name = \"mysecret\" , type = \"password\" ) [secret] >>> Secrets . get ( id = \"100\" ) secret Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the secret None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None name str The name of the instance. None type str The type of the secret. Can be password or ssh . None Returns: Type Description Union [ Secret , List [ Secret ]] List of secrets Source code in pyContabo/Secrets.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def get ( self , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , name : str = None , type : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Secret , List [ Secret ]]: \"\"\"fetches any secret(s) by id or other parameters Examples: >>> Secrets.get() [secret] >>> Secrets.get(name=\"mysecret\", type=\"password\") [secret] >>> Secrets.get(id=\"100\") secret Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the secret page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` name: The name of the instance. type: The type of the secret. Can be `password` or `ssh`. Returns: List of secrets \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/secrets/ { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return Secret ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/secrets? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'name= { name } &' if name is not None else '' }{ f 'name= { type } &' if type is not None else '' } \" url = url [: - 1 ] # Remove the \"?\" at the end of the url resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] secrets = [] for i in resp . json ()[ \"data\" ]: secrets . append ( Secret ( i , self . _http )) return secrets","title":"get()"},{"location":"secrets/#pyContabo.Secret.Secret","text":"Secret ( json , _http ) Source code in pyContabo/Secret.py 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . secretId = json [ \"secretId\" ] self . name = json [ \"name\" ] self . type = json [ \"type\" ] self . value = json [ \"value\" ] self . createdAt = json [ \"createdAt\" ] self . updatedAt = json [ \"updatedAt\" ] self . rawJson = json","title":"Secret"},{"location":"secrets/#pyContabo.Secret.Secret.delete","text":"delete ( x_request_id = None , x_trace_id = None ) deletes the secret Examples: >>> secret . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the secret has been succesfully deleted. Source code in pyContabo/Secret.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the secret Examples: >>> secret.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the secret has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/secrets/ { self . secretId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False","title":"delete()"},{"location":"secrets/#pyContabo.Secret.Secret.update","text":"update ( name , value , x_request_id = None , x_trace_id = None ) Update attributes to your secret. Attributes are optional. If not set, the attributes will retain their original values. Only name and value can be updated. Examples: >>> secret . update ( name = \"name\" , value = \"12345678\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the secret to be saved required value str The value of the secret to be saved required Returns: Type Description bool Bool respresenting if the secret has been succesfully updated. Source code in pyContabo/Secret.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 def update ( self , name : str , value : str , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Update attributes to your secret. Attributes are optional. If not set, the attributes will retain their original values. Only name and value can be updated. Examples: >>> secret.update(name=\"name\", value=\"12345678\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the secret to be saved value: The value of the secret to be saved Returns: Bool respresenting if the secret has been succesfully updated. \"\"\" resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/secrets/ { self . secretId } \" , data = { \"name\" : name , \"value\" : value }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False","title":"update()"},{"location":"secrets/#pyContabo.audits.SecretsAudits.SecretsAudits","text":"SecretsAudits ( _http ) Source code in pyContabo/audits/SecretsAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http","title":"SecretsAudits"},{"location":"secrets/#pyContabo.audits.SecretsAudits.SecretsAudits.get","text":"get ( page = None , pageSize = None , orderBy = None , secretId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> Secrets . Audits . get () [SecretsAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None secretId int The identifier of the secret. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ SecretsAudit ] List of SecretsAudit Source code in pyContabo/audits/SecretsAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , secretId : int = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ SecretsAudit ]: \"\"\"fetches audits Examples: >>> Secrets.Audits.get() [SecretsAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` secretId: The identifier of the secret. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of SecretsAudit \"\"\" url = f \"https://api.contabo.com/v1/secrets/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'secretId= { secretId } &' if secretId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( SecretsAudit ( i )) return audits else : return []","title":"get()"},{"location":"snapshots/","text":"Snapshots Snapshots ( instanceId , _http ) Source code in pyContabo/Snapshots.py 9 10 11 12 13 def __init__ ( self , instanceId : int , _http ): self . _http = _http self . instanceId = instanceId self . Audits = SnapshotsAudits ( _http ) create create ( name , description = None , x_request_id = None , x_trace_id = None , ) Creates a new snapshot Examples: >>> Snapshots . create ( name = \"aName\" , description = \"desc.\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the snapshot. required description str The description of the snapshot. There is a limit of 255 characters per snapshot. None Returns: Type Description bool Bool respresenting if the snapshot has been succesfully created. Source code in pyContabo/Snapshots.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def create ( self , name : str , description : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Creates a new snapshot Examples: >>> Snapshots.create(name=\"aName\", description=\"desc.\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the snapshot. description: The description of the snapshot. There is a limit of 255 characters per snapshot. Returns: Bool respresenting if the snapshot has been succesfully created. \"\"\" if description : data = json . dumps ({ \"name\" : name , \"description\" : description }) else : data = json . dumps ({ \"name\" : name }) resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots\" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False get get ( id = None , page = None , pageSize = None , orderBy = None , name = None , x_request_id = None , x_trace_id = None , ) fetches any snapshot(s) by id or other parameters Examples: >>> Snapshots . get () [snapshot] >>> Snapshots . get ( name = \"mysnapshots\" ) [snapshot] >>> Snapshots . get ( id = \"100\" ) snapshot Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the snapshot None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None name str The name of the snapshot. None Returns: Type Description Union [ Snapshot , List [ Snapshot ]] List of snapshots Source code in pyContabo/Snapshots.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def get ( self , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , name : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Snapshot , List [ Snapshot ]]: \"\"\"fetches any snapshot(s) by id or other parameters Examples: >>> Snapshots.get() [snapshot] >>> Snapshots.get(name=\"mysnapshots\") [snapshot] >>> Snapshots.get(id=\"100\") snapshot Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the snapshot page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` name: The name of the snapshot. Returns: List of snapshots \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots/ { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return Snapshot ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'name= { name } &' if name is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] snapshots = [] for i in resp . json ()[ \"data\" ]: snapshots . append ( Snapshot ( i , self . _http )) return snapshots Snapshot Snapshot ( json , _http ) Source code in pyContabo/Snapshot.py 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . snapshotId = json [ \"snapshotId\" ] self . name = json [ \"name\" ] self . description = json [ \"description\" ] self . instanceId = json [ \"instanceId\" ] self . createdDate = json [ \"createdDate\" ] self . autoDeleteDate = json [ \"autoDeleteDate\" ] self . imageId = json [ \"imageId\" ] self . imageName = json [ \"imageName\" ] self . rawJson = json delete delete ( x_request_id = None , x_trace_id = None ) deletes the snapshot Examples: >>> snapshot . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the snapshot has been succesfully deleted. Source code in pyContabo/Snapshot.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the snapshot Examples: >>> snapshot.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the snapshot has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots/ { self . snapshotId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False rollback rollback ( x_request_id = None , x_trace_id = None ) Rollback instance to the snapshot. Examples: >>> snapshot . rollback () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the instance has been rolled back to the snapshot Source code in pyContabo/Snapshot.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def rollback ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Rollback instance to the snapshot. Examples: >>> snapshot.rollback() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the instance has been rolled back to the snapshot \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots/ { self . snapshotId } /rollback\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False update update ( name , description = None , x_request_id = None , x_trace_id = None , ) Update attributes of a snapshot. You may only specify the attributes you want to change. If an attribute is not set, it will retain its original value. Examples: >>> snapshot . update ( name = \"name\" , description = \"desc\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the snapshot. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per snapshot. required description str The description of the snapshot. There is a limit of 255 characters per snapshot. None Returns: Type Description bool Bool respresenting if the snapshot has been succesfully updated. Source code in pyContabo/Snapshot.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def update ( self , name : str , description : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Update attributes of a snapshot. You may only specify the attributes you want to change. If an attribute is not set, it will retain its original value. Examples: >>> snapshot.update(name=\"name\", description=\"desc\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the snapshot. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per snapshot. description: The description of the snapshot. There is a limit of 255 characters per snapshot. Returns: Bool respresenting if the snapshot has been succesfully updated. \"\"\" if description : resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots/ { self . snapshotId } \" , data = { \"name\" : name , \"description\" : description }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) else : resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots/ { self . snapshotId } \" , data = { \"name\" : name , \"description\" : description }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False SnapshotsAudits SnapshotsAudits ( _http ) Source code in pyContabo/audits/SnapshotsAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http get get ( page = None , pageSize = None , orderBy = None , instanceId = None , snapshotId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> Snapshots . Audits . get () [SnapshotsAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None snapshotId str The identifier of the snapshot. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ SnapshotsAudit ] List of SnapshotsAudit Source code in pyContabo/audits/SnapshotsAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , instanceId : int = None , snapshotId : str = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ SnapshotsAudit ]: \"\"\"fetches audits Examples: >>> Snapshots.Audits.get() [SnapshotsAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` snapshotId: The identifier of the snapshot. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of SnapshotsAudit \"\"\" url = f \"https://api.contabo.com/v1/compute/snapshots/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'snapshotId= { snapshotId } &' if snapshotId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( SnapshotsAudit ( i )) return audits else : return []","title":"Snapshots"},{"location":"snapshots/#pyContabo.Snapshots.Snapshots","text":"Snapshots ( instanceId , _http ) Source code in pyContabo/Snapshots.py 9 10 11 12 13 def __init__ ( self , instanceId : int , _http ): self . _http = _http self . instanceId = instanceId self . Audits = SnapshotsAudits ( _http )","title":"Snapshots"},{"location":"snapshots/#pyContabo.Snapshots.Snapshots.create","text":"create ( name , description = None , x_request_id = None , x_trace_id = None , ) Creates a new snapshot Examples: >>> Snapshots . create ( name = \"aName\" , description = \"desc.\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the snapshot. required description str The description of the snapshot. There is a limit of 255 characters per snapshot. None Returns: Type Description bool Bool respresenting if the snapshot has been succesfully created. Source code in pyContabo/Snapshots.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def create ( self , name : str , description : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Creates a new snapshot Examples: >>> Snapshots.create(name=\"aName\", description=\"desc.\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the snapshot. description: The description of the snapshot. There is a limit of 255 characters per snapshot. Returns: Bool respresenting if the snapshot has been succesfully created. \"\"\" if description : data = json . dumps ({ \"name\" : name , \"description\" : description }) else : data = json . dumps ({ \"name\" : name }) resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots\" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False","title":"create()"},{"location":"snapshots/#pyContabo.Snapshots.Snapshots.get","text":"get ( id = None , page = None , pageSize = None , orderBy = None , name = None , x_request_id = None , x_trace_id = None , ) fetches any snapshot(s) by id or other parameters Examples: >>> Snapshots . get () [snapshot] >>> Snapshots . get ( name = \"mysnapshots\" ) [snapshot] >>> Snapshots . get ( id = \"100\" ) snapshot Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the snapshot None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None name str The name of the snapshot. None Returns: Type Description Union [ Snapshot , List [ Snapshot ]] List of snapshots Source code in pyContabo/Snapshots.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def get ( self , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , name : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Snapshot , List [ Snapshot ]]: \"\"\"fetches any snapshot(s) by id or other parameters Examples: >>> Snapshots.get() [snapshot] >>> Snapshots.get(name=\"mysnapshots\") [snapshot] >>> Snapshots.get(id=\"100\") snapshot Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the snapshot page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` name: The name of the snapshot. Returns: List of snapshots \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots/ { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return Snapshot ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'name= { name } &' if name is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] snapshots = [] for i in resp . json ()[ \"data\" ]: snapshots . append ( Snapshot ( i , self . _http )) return snapshots","title":"get()"},{"location":"snapshots/#pyContabo.Snapshot.Snapshot","text":"Snapshot ( json , _http ) Source code in pyContabo/Snapshot.py 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . snapshotId = json [ \"snapshotId\" ] self . name = json [ \"name\" ] self . description = json [ \"description\" ] self . instanceId = json [ \"instanceId\" ] self . createdDate = json [ \"createdDate\" ] self . autoDeleteDate = json [ \"autoDeleteDate\" ] self . imageId = json [ \"imageId\" ] self . imageName = json [ \"imageName\" ] self . rawJson = json","title":"Snapshot"},{"location":"snapshots/#pyContabo.Snapshot.Snapshot.delete","text":"delete ( x_request_id = None , x_trace_id = None ) deletes the snapshot Examples: >>> snapshot . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the snapshot has been succesfully deleted. Source code in pyContabo/Snapshot.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the snapshot Examples: >>> snapshot.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the snapshot has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots/ { self . snapshotId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False","title":"delete()"},{"location":"snapshots/#pyContabo.Snapshot.Snapshot.rollback","text":"rollback ( x_request_id = None , x_trace_id = None ) Rollback instance to the snapshot. Examples: >>> snapshot . rollback () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the instance has been rolled back to the snapshot Source code in pyContabo/Snapshot.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 def rollback ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Rollback instance to the snapshot. Examples: >>> snapshot.rollback() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the instance has been rolled back to the snapshot \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots/ { self . snapshotId } /rollback\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False","title":"rollback()"},{"location":"snapshots/#pyContabo.Snapshot.Snapshot.update","text":"update ( name , description = None , x_request_id = None , x_trace_id = None , ) Update attributes of a snapshot. You may only specify the attributes you want to change. If an attribute is not set, it will retain its original value. Examples: >>> snapshot . update ( name = \"name\" , description = \"desc\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the snapshot. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per snapshot. required description str The description of the snapshot. There is a limit of 255 characters per snapshot. None Returns: Type Description bool Bool respresenting if the snapshot has been succesfully updated. Source code in pyContabo/Snapshot.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def update ( self , name : str , description : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Update attributes of a snapshot. You may only specify the attributes you want to change. If an attribute is not set, it will retain its original value. Examples: >>> snapshot.update(name=\"name\", description=\"desc\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the snapshot. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per snapshot. description: The description of the snapshot. There is a limit of 255 characters per snapshot. Returns: Bool respresenting if the snapshot has been succesfully updated. \"\"\" if description : resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots/ { self . snapshotId } \" , data = { \"name\" : name , \"description\" : description }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) else : resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots/ { self . snapshotId } \" , data = { \"name\" : name , \"description\" : description }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False","title":"update()"},{"location":"snapshots/#pyContabo.audits.SnapshotsAudits.SnapshotsAudits","text":"SnapshotsAudits ( _http ) Source code in pyContabo/audits/SnapshotsAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http","title":"SnapshotsAudits"},{"location":"snapshots/#pyContabo.audits.SnapshotsAudits.SnapshotsAudits.get","text":"get ( page = None , pageSize = None , orderBy = None , instanceId = None , snapshotId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> Snapshots . Audits . get () [SnapshotsAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None snapshotId str The identifier of the snapshot. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ SnapshotsAudit ] List of SnapshotsAudit Source code in pyContabo/audits/SnapshotsAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , instanceId : int = None , snapshotId : str = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ SnapshotsAudit ]: \"\"\"fetches audits Examples: >>> Snapshots.Audits.get() [SnapshotsAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` snapshotId: The identifier of the snapshot. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of SnapshotsAudit \"\"\" url = f \"https://api.contabo.com/v1/compute/snapshots/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'snapshotId= { snapshotId } &' if snapshotId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'instanceId= { instanceId } &' if instanceId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( SnapshotsAudit ( i )) return audits else : return []","title":"get()"},{"location":"tags/","text":"Tags Tags ( _http ) Source code in pyContabo/Tags.py 9 10 11 12 def __init__ ( self , _http ): self . _http = _http self . Audits = TagsAudits ( _http ) create create ( name , color , x_request_id = None , x_trace_id = None ) Creates a new tag Examples: >>> Tags . create ( name = \"aName\" , color = \"#0A78C3\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the tag. required color str The color of the tag. Color can be specified using hexadecimal value. Default color is #0A78C3 required Returns: Type Description bool Bool respresenting if the tag has been succesfully created. Source code in pyContabo/Tags.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def create ( self , name : str , color : str , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Creates a new tag Examples: >>> Tags.create(name=\"aName\", color=\"#0A78C3\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the tag. color: The color of the tag. Color can be specified using hexadecimal value. Default color is #0A78C3 Returns: Bool respresenting if the tag has been succesfully created. \"\"\" data = json . dumps ({ \"name\" : name , \"color\" : color }) resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/tags\" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False get get ( id = None , page = None , pageSize = None , orderBy = None , name = None , x_request_id = None , x_trace_id = None , ) fetches any tag(s) by id or other parameters Examples: >>> Tags . get () [tag] >>> Tags . get ( name = \"mysecret\" ) [tag] >>> Tags . get ( id = \"12345\" ) tag Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the tag None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None name str The name of the tag. None Returns: Type Description Union [ Tag , List [ Tag ]] List of tags Source code in pyContabo/Tags.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def get ( self , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , name : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Tag , List [ Tag ]]: \"\"\"fetches any tag(s) by id or other parameters Examples: >>> Tags.get() [tag] >>> Tags.get(name=\"mysecret\") [tag] >>> Tags.get(id=\"12345\") tag Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the tag page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` name: The name of the tag. Returns: List of tags \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/tags/ { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return Tag ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/tags? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'name= { name } &' if name is not None else '' } \" url = url [: - 1 ] # Remove the \"?\" at the end of the url resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] tags = [] for i in resp . json ()[ \"data\" ]: tags . append ( Tag ( i , self . _http )) return tags Tag Tag ( json , _http ) Source code in pyContabo/Tag.py 6 7 8 9 10 11 12 13 14 15 16 17 def __init__ ( self , json , _http ): self . _http = _http self . Assignments = Assignments ( _http , json [ \"tagId\" ]) self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . tagId = json [ \"tagId\" ] self . name = json [ \"name\" ] self . color = json [ \"color\" ] self . rawJson = json assign assign ( resourceType , resourceId , x_request_id = None , x_trace_id = None , ) Create a new tag assignment. This marks the specified resource with the specified tag for organizing purposes or to restrict access to that resource. Examples: >>> tag . assign ( resourceType = ressource . instance , resourceId = \"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None resourceType resource The identifier of the resource type. Resource type is one of instance|image|object-storage required resourceId str The identifier of the resource id required Returns: Type Description bool Bool respresenting if the tag has been succesfully assigned. Source code in pyContabo/Tag.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def assign ( self , resourceType : resource , resourceId : str , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Create a new tag assignment. This marks the specified resource with the specified tag for organizing purposes or to restrict access to that resource. Examples: >>> tag.assign(resourceType=ressource.instance, resourceId=\"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. resourceType: The identifier of the resource type. Resource type is one of `instance|image|object-storage` resourceId: The identifier of the resource id Returns: Bool respresenting if the tag has been succesfully assigned. \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/tags/ { self . tagId } /assignments/ { resourceType . name } / { resourceId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False delete delete ( x_request_id = None , x_trace_id = None ) deletes the tag Examples: >>> tag . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the tag has been succesfully deleted. Source code in pyContabo/Tag.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the tag Examples: >>> tag.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the tag has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/tags/ { self . tagId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False update update ( name , color , x_request_id = None , x_trace_id = None ) Update attributes to your tag. Attributes are optional. If not set, the attributes will retain their original values. Examples: >>> tag . update ( name = \"name\" , color = \"#0A78C3\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag. required color str The color of the tag. Color can be specified using hexadecimal value. Default color is #0A78C3 required Returns: Type Description bool Bool respresenting if the tag has been succesfully updated. Source code in pyContabo/Tag.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def update ( self , name : str , color : str , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Update attributes to your tag. Attributes are optional. If not set, the attributes will retain their original values. Examples: >>> tag.update(name=\"name\", color=\"#0A78C3\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag. color: The color of the tag. Color can be specified using hexadecimal value. Default color is #0A78C3 Returns: Bool respresenting if the tag has been succesfully updated. \"\"\" resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/tags/ { self . tagId } \" , data = { \"name\" : name , \"color\" : color }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False TagsAudits TagsAudits ( _http ) Source code in pyContabo/audits/TagsAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http get get ( page = None , pageSize = None , orderBy = None , tagId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> Tags . Audits . get () [TagsAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None tagId int The identifier of the tag. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ TagsAudit ] List of TagsAudit Source code in pyContabo/audits/TagsAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , tagId : int = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ TagsAudit ]: \"\"\"fetches audits Examples: >>> Tags.Audits.get() [TagsAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` tagId: The identifier of the tag. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of TagsAudit \"\"\" url = f \"https://api.contabo.com/v1/tags/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'tagId= { tagId } &' if tagId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( TagsAudit ( i )) return audits else : return []","title":"Tags"},{"location":"tags/#pyContabo.Tags.Tags","text":"Tags ( _http ) Source code in pyContabo/Tags.py 9 10 11 12 def __init__ ( self , _http ): self . _http = _http self . Audits = TagsAudits ( _http )","title":"Tags"},{"location":"tags/#pyContabo.Tags.Tags.create","text":"create ( name , color , x_request_id = None , x_trace_id = None ) Creates a new tag Examples: >>> Tags . create ( name = \"aName\" , color = \"#0A78C3\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the tag. required color str The color of the tag. Color can be specified using hexadecimal value. Default color is #0A78C3 required Returns: Type Description bool Bool respresenting if the tag has been succesfully created. Source code in pyContabo/Tags.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 def create ( self , name : str , color : str , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Creates a new tag Examples: >>> Tags.create(name=\"aName\", color=\"#0A78C3\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the tag. color: The color of the tag. Color can be specified using hexadecimal value. Default color is #0A78C3 Returns: Bool respresenting if the tag has been succesfully created. \"\"\" data = json . dumps ({ \"name\" : name , \"color\" : color }) resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/tags\" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False","title":"create()"},{"location":"tags/#pyContabo.Tags.Tags.get","text":"get ( id = None , page = None , pageSize = None , orderBy = None , name = None , x_request_id = None , x_trace_id = None , ) fetches any tag(s) by id or other parameters Examples: >>> Tags . get () [tag] >>> Tags . get ( name = \"mysecret\" ) [tag] >>> Tags . get ( id = \"12345\" ) tag Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the tag None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None name str The name of the tag. None Returns: Type Description Union [ Tag , List [ Tag ]] List of tags Source code in pyContabo/Tags.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def get ( self , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , name : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Tag , List [ Tag ]]: \"\"\"fetches any tag(s) by id or other parameters Examples: >>> Tags.get() [tag] >>> Tags.get(name=\"mysecret\") [tag] >>> Tags.get(id=\"12345\") tag Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the tag page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` name: The name of the tag. Returns: List of tags \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/tags/ { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return Tag ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/tags? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'name= { name } &' if name is not None else '' } \" url = url [: - 1 ] # Remove the \"?\" at the end of the url resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] tags = [] for i in resp . json ()[ \"data\" ]: tags . append ( Tag ( i , self . _http )) return tags","title":"get()"},{"location":"tags/#pyContabo.Tag.Tag","text":"Tag ( json , _http ) Source code in pyContabo/Tag.py 6 7 8 9 10 11 12 13 14 15 16 17 def __init__ ( self , json , _http ): self . _http = _http self . Assignments = Assignments ( _http , json [ \"tagId\" ]) self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . tagId = json [ \"tagId\" ] self . name = json [ \"name\" ] self . color = json [ \"color\" ] self . rawJson = json","title":"Tag"},{"location":"tags/#pyContabo.Tag.Tag.assign","text":"assign ( resourceType , resourceId , x_request_id = None , x_trace_id = None , ) Create a new tag assignment. This marks the specified resource with the specified tag for organizing purposes or to restrict access to that resource. Examples: >>> tag . assign ( resourceType = ressource . instance , resourceId = \"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None resourceType resource The identifier of the resource type. Resource type is one of instance|image|object-storage required resourceId str The identifier of the resource id required Returns: Type Description bool Bool respresenting if the tag has been succesfully assigned. Source code in pyContabo/Tag.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def assign ( self , resourceType : resource , resourceId : str , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Create a new tag assignment. This marks the specified resource with the specified tag for organizing purposes or to restrict access to that resource. Examples: >>> tag.assign(resourceType=ressource.instance, resourceId=\"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. resourceType: The identifier of the resource type. Resource type is one of `instance|image|object-storage` resourceId: The identifier of the resource id Returns: Bool respresenting if the tag has been succesfully assigned. \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/tags/ { self . tagId } /assignments/ { resourceType . name } / { resourceId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False","title":"assign()"},{"location":"tags/#pyContabo.Tag.Tag.delete","text":"delete ( x_request_id = None , x_trace_id = None ) deletes the tag Examples: >>> tag . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the tag has been succesfully deleted. Source code in pyContabo/Tag.py 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the tag Examples: >>> tag.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the tag has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/tags/ { self . tagId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False","title":"delete()"},{"location":"tags/#pyContabo.Tag.Tag.update","text":"update ( name , color , x_request_id = None , x_trace_id = None ) Update attributes to your tag. Attributes are optional. If not set, the attributes will retain their original values. Examples: >>> tag . update ( name = \"name\" , color = \"#0A78C3\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None name str The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag. required color str The color of the tag. Color can be specified using hexadecimal value. Default color is #0A78C3 required Returns: Type Description bool Bool respresenting if the tag has been succesfully updated. Source code in pyContabo/Tag.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def update ( self , name : str , color : str , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Update attributes to your tag. Attributes are optional. If not set, the attributes will retain their original values. Examples: >>> tag.update(name=\"name\", color=\"#0A78C3\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. name: The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag. color: The color of the tag. Color can be specified using hexadecimal value. Default color is #0A78C3 Returns: Bool respresenting if the tag has been succesfully updated. \"\"\" resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/tags/ { self . tagId } \" , data = { \"name\" : name , \"color\" : color }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False","title":"update()"},{"location":"tags/#pyContabo.audits.TagsAudits.TagsAudits","text":"TagsAudits ( _http ) Source code in pyContabo/audits/TagsAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http","title":"TagsAudits"},{"location":"tags/#pyContabo.audits.TagsAudits.TagsAudits.get","text":"get ( page = None , pageSize = None , orderBy = None , tagId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> Tags . Audits . get () [TagsAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None tagId int The identifier of the tag. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ TagsAudit ] List of TagsAudit Source code in pyContabo/audits/TagsAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , tagId : int = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ TagsAudit ]: \"\"\"fetches audits Examples: >>> Tags.Audits.get() [TagsAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` tagId: The identifier of the tag. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of TagsAudit \"\"\" url = f \"https://api.contabo.com/v1/tags/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'tagId= { tagId } &' if tagId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( TagsAudit ( i )) return audits else : return []","title":"get()"},{"location":"tags_assignments/","text":"Assignments Assignments ( _http , tagId ) Source code in pyContabo/Assignments.py 9 10 11 12 13 def __init__ ( self , _http , tagId ): self . _http = _http self . tagId = tagId self . Audits = TagAssignmentsAudits ( _http ) assign assign ( resourceType , resourceId , x_request_id = None , x_trace_id = None , ) Create a new tag assignment. This marks the specified resource with the specified tag for organizing purposes or to restrict access to that resource. Examples: >>> Assignments . assign ( resourceType = \"instance\" , resourceId = \"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None resourceType str The identifier of the resource type. Resource type is one of instance|image|object-storage required resourceId str The identifier of the resource id required Returns: Type Description bool Bool respresenting if the assignment has been succesfully assigned. Source code in pyContabo/Assignments.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def assign ( self , resourceType : str , resourceId : str , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Create a new tag assignment. This marks the specified resource with the specified tag for organizing purposes or to restrict access to that resource. Examples: >>> Assignments.assign(resourceType=\"instance\", resourceId=\"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. resourceType: The identifier of the resource type. Resource type is one of `instance|image|object-storage` resourceId: The identifier of the resource id Returns: Bool respresenting if the assignment has been succesfully assigned. \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/tags/ { self . tagId } /assignments/ { resourceType } / { resourceId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False get get ( resourceType = None , resourceId = None , page = None , pageSize = None , orderBy = None , x_request_id = None , x_trace_id = None , ) fetches any tag assignment(s) by id or other parameters Examples: >>> Assignments . get () [assignment] >>> Assignments . get ( resourceType = \"instance\" , resourceId = \"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\" , orderBy = \"name:asc\" ) [assignment] >>> Assignments . get ( resourceType = \"instance\" , resourceId = \"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\" ) assignment Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None resourceType str The identifier of the resource type. Resource type is one of instance|image|object-storage None resourceId str The identifier of the resource id None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None Returns: Type Description Union [ Assignment , List [ Assignment ]] List of tag assignments Source code in pyContabo/Assignments.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def get ( self , resourceType : str = None , resourceId : str = None , page : int = None , pageSize : int = None , orderBy : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Assignment , List [ Assignment ]]: \"\"\"fetches any tag assignment(s) by id or other parameters Examples: >>> Assignments.get() [assignment] >>> Assignments.get(resourceType=\"instance\", resourceId=\"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\", orderBy=\"name:asc\") [assignment] >>> Assignments.get(resourceType=\"instance\", resourceId=\"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\") assignment Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. resourceType: The identifier of the resource type. Resource type is one of `instance|image|object-storage` resourceId: The identifier of the resource id page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` Returns: List of tag assignments \"\"\" if resourceType and resourceId : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/tags/ { self . tagId } /assignments/ { resourceType } / { resourceId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return Assignment ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/tags/ { self . tagId } /assignments? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' } \" url = url [: - 1 ] # Remove the \"?\" at the end of the url resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] assignment = [] for i in resp . json ()[ \"data\" ]: assignment . append ( Assignment ( i , self . _http )) return assignment Assignment Assignment ( json , _http ) Source code in pyContabo/Assignment.py 2 3 4 5 6 7 8 9 10 11 12 13 14 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . tagId = json [ \"tagId\" ] self . tagName = json [ \"tagName\" ] self . resourceType = json [ \"resourceType\" ] self . resourceId = json [ \"resourceId\" ] self . resourceName = json [ \"resourceName\" ] self . rawJson = json delete delete ( x_request_id = None , x_trace_id = None ) deletes the assignment Examples: >>> assignment . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the assignment has been succesfully deleted. Source code in pyContabo/Assignment.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the assignment Examples: >>> assignment.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the assignment has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/tags/ { self . tagId } /assignments/ { self . resourceType } / { self . resourceId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False TagAssignmentsAudits TagAssignmentsAudits ( _http ) Source code in pyContabo/audits/TagAssignmentsAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http get get ( page = None , pageSize = None , orderBy = None , tagId = None , resourceId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> tag . Assignments . Audits . get () [TagAssignmentsAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None tagId int The identifier of the tag. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ TagAssignmentsAudit ] List of TagAssignmentsAudit Source code in pyContabo/audits/TagAssignmentsAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , tagId : int = None , resourceId : str = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ TagAssignmentsAudit ]: \"\"\"fetches audits Examples: >>> tag.Assignments.Audits.get() [TagAssignmentsAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` tagId: The identifier of the tag. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of TagAssignmentsAudit \"\"\" url = f \"https://api.contabo.com/v1/tags/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'tagId= { tagId } &' if tagId is not None else '' }{ f 'resourceId= { resourceId } &' if resourceId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( TagAssignmentsAudit ( i )) return audits else : return []","title":"Tags assignments"},{"location":"tags_assignments/#pyContabo.Assignments.Assignments","text":"Assignments ( _http , tagId ) Source code in pyContabo/Assignments.py 9 10 11 12 13 def __init__ ( self , _http , tagId ): self . _http = _http self . tagId = tagId self . Audits = TagAssignmentsAudits ( _http )","title":"Assignments"},{"location":"tags_assignments/#pyContabo.Assignments.Assignments.assign","text":"assign ( resourceType , resourceId , x_request_id = None , x_trace_id = None , ) Create a new tag assignment. This marks the specified resource with the specified tag for organizing purposes or to restrict access to that resource. Examples: >>> Assignments . assign ( resourceType = \"instance\" , resourceId = \"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None resourceType str The identifier of the resource type. Resource type is one of instance|image|object-storage required resourceId str The identifier of the resource id required Returns: Type Description bool Bool respresenting if the assignment has been succesfully assigned. Source code in pyContabo/Assignments.py 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 def assign ( self , resourceType : str , resourceId : str , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Create a new tag assignment. This marks the specified resource with the specified tag for organizing purposes or to restrict access to that resource. Examples: >>> Assignments.assign(resourceType=\"instance\", resourceId=\"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. resourceType: The identifier of the resource type. Resource type is one of `instance|image|object-storage` resourceId: The identifier of the resource id Returns: Bool respresenting if the assignment has been succesfully assigned. \"\"\" resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/tags/ { self . tagId } /assignments/ { resourceType } / { resourceId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False","title":"assign()"},{"location":"tags_assignments/#pyContabo.Assignments.Assignments.get","text":"get ( resourceType = None , resourceId = None , page = None , pageSize = None , orderBy = None , x_request_id = None , x_trace_id = None , ) fetches any tag assignment(s) by id or other parameters Examples: >>> Assignments . get () [assignment] >>> Assignments . get ( resourceType = \"instance\" , resourceId = \"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\" , orderBy = \"name:asc\" ) [assignment] >>> Assignments . get ( resourceType = \"instance\" , resourceId = \"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\" ) assignment Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None resourceType str The identifier of the resource type. Resource type is one of instance|image|object-storage None resourceId str The identifier of the resource id None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None Returns: Type Description Union [ Assignment , List [ Assignment ]] List of tag assignments Source code in pyContabo/Assignments.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def get ( self , resourceType : str = None , resourceId : str = None , page : int = None , pageSize : int = None , orderBy : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ Assignment , List [ Assignment ]]: \"\"\"fetches any tag assignment(s) by id or other parameters Examples: >>> Assignments.get() [assignment] >>> Assignments.get(resourceType=\"instance\", resourceId=\"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\", orderBy=\"name:asc\") [assignment] >>> Assignments.get(resourceType=\"instance\", resourceId=\"d65ecf3b-30db-4dc2-9e88-dfc21a14a6bc\") assignment Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. resourceType: The identifier of the resource type. Resource type is one of `instance|image|object-storage` resourceId: The identifier of the resource id page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` Returns: List of tag assignments \"\"\" if resourceType and resourceId : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/tags/ { self . tagId } /assignments/ { resourceType } / { resourceId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return Assignment ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/tags/ { self . tagId } /assignments? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' } \" url = url [: - 1 ] # Remove the \"?\" at the end of the url resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] assignment = [] for i in resp . json ()[ \"data\" ]: assignment . append ( Assignment ( i , self . _http )) return assignment","title":"get()"},{"location":"tags_assignments/#pyContabo.Assignment.Assignment","text":"Assignment ( json , _http ) Source code in pyContabo/Assignment.py 2 3 4 5 6 7 8 9 10 11 12 13 14 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . tagId = json [ \"tagId\" ] self . tagName = json [ \"tagName\" ] self . resourceType = json [ \"resourceType\" ] self . resourceId = json [ \"resourceId\" ] self . resourceName = json [ \"resourceName\" ] self . rawJson = json","title":"Assignment"},{"location":"tags_assignments/#pyContabo.Assignment.Assignment.delete","text":"delete ( x_request_id = None , x_trace_id = None ) deletes the assignment Examples: >>> assignment . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the assignment has been succesfully deleted. Source code in pyContabo/Assignment.py 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the assignment Examples: >>> assignment.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the assignment has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/tags/ { self . tagId } /assignments/ { self . resourceType } / { self . resourceId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False","title":"delete()"},{"location":"tags_assignments/#pyContabo.audits.TagAssignmentsAudits.TagAssignmentsAudits","text":"TagAssignmentsAudits ( _http ) Source code in pyContabo/audits/TagAssignmentsAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http","title":"TagAssignmentsAudits"},{"location":"tags_assignments/#pyContabo.audits.TagAssignmentsAudits.TagAssignmentsAudits.get","text":"get ( page = None , pageSize = None , orderBy = None , tagId = None , resourceId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> tag . Assignments . Audits . get () [TagAssignmentsAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None tagId int The identifier of the tag. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ TagAssignmentsAudit ] List of TagAssignmentsAudit Source code in pyContabo/audits/TagAssignmentsAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , tagId : int = None , resourceId : str = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ TagAssignmentsAudit ]: \"\"\"fetches audits Examples: >>> tag.Assignments.Audits.get() [TagAssignmentsAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` tagId: The identifier of the tag. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of TagAssignmentsAudit \"\"\" url = f \"https://api.contabo.com/v1/tags/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'tagId= { tagId } &' if tagId is not None else '' }{ f 'resourceId= { resourceId } &' if resourceId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( TagAssignmentsAudit ( i )) return audits else : return []","title":"get()"},{"location":"users/","text":"Users Users ( _http ) Source code in pyContabo/Users.py 10 11 12 13 def __init__ ( self , _http ): self . _http = _http self . Audits = UsersAudits ( _http ) create create ( email , enabled , totp , locale , firstName = None , lastName = None , roles = None , x_request_id = None , x_trace_id = None , ) Creates a new user Examples: >>> Users . create ( email = \"example@example.com\" , enabled = True , totp = False , locale = locale ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None email str The email of the user to which activation and forgot password links are being sent to. There is a limit of 255 characters per email. required enabled bool If user is not enabled, he can't login and thus use services any longer. required totp bool Enable or disable two-factor authentication (2FA) via time based OTP. required locale locale The locale of the user. This can be de-DE , de , en-US , en . required firstName str The name of the user. Names may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. None lastName str The last name of the user. Users may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. None roles List [ int ] The roles as list of roleId s of the user. None Returns: Type Description bool Bool respresenting if the secret has been succesfully created. Source code in pyContabo/Users.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def create ( self , email : str , enabled : bool , totp : bool , locale : locale , firstName : str = None , lastName : str = None , roles : List [ int ] = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Creates a new user Examples: >>> Users.create(email=\"example@example.com\", enabled=True, totp=False, locale=locale) True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. email: The email of the user to which activation and forgot password links are being sent to. There is a limit of 255 characters per email. enabled: If user is not enabled, he can't login and thus use services any longer. totp: Enable or disable two-factor authentication (2FA) via time based OTP. locale: The locale of the user. This can be `de-DE`, `de`, `en-US`, `en`. firstName: The name of the user. Names may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. lastName: The last name of the user. Users may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. roles: The roles as list of `roleId`s of the user. Returns: Bool respresenting if the secret has been succesfully created. \"\"\" data = { \"firstName\" : firstName , \"lastName\" : lastName , \"email\" : email , \"enabled\" : enabled , \"totp\" : totp , \"locale\" : locale . name , } if roles : data . append ( roles ) resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/users\" , data = json . dumps ( data ), x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False get get ( id = None , page = None , pageSize = None , orderBy = None , email = None , enabled = None , owner = None , x_request_id = None , x_trace_id = None , ) fetches any user(s) by id or other parameters Examples: >>> Users . get () [user] >>> Users . get ( email = \"mysecret\" , type = \"password\" ) [user] >>> Users . get ( id = \"6cdf5968-f9fe-4192-97c2-f349e813c5e8\" ) user Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the secret None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None email str Filter as substring match for user emails. None enabled bool Filter if user is enabled or not. None owner bool Filter if user is owner or not. None Returns: Type Description Union [ User , List [ User ]] List of users Source code in pyContabo/Users.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def get ( self , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , email : str = None , enabled : bool = None , owner : bool = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ User , List [ User ]]: \"\"\"fetches any user(s) by id or other parameters Examples: >>> Users.get() [user] >>> Users.get(email=\"mysecret\", type=\"password\") [user] >>> Users.get(id=\"6cdf5968-f9fe-4192-97c2-f349e813c5e8\") user Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the secret page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` email: Filter as substring match for user emails. enabled: Filter if user is enabled or not. owner: Filter if user is owner or not. Returns: List of users \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/users/ { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return User ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'email= { email } &' if email is not None else '' }{ f 'enabled= { enabled } &' if enabled is not None else '' }{ f 'owner= { owner } &' if owner is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] users = [] for i in resp . json ()[ \"data\" ]: users . append ( User ( i , self . _http )) return users User User ( json , _http ) Source code in pyContabo/User.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . userId = json [ \"userId\" ] self . firstName = json [ \"firstName\" ] self . lastName = json [ \"lastName\" ] self . email = json [ \"email\" ] self . emailVerified = json [ \"emailVerified\" ] self . enabled = json [ \"enabled\" ] self . totp = json [ \"totp\" ] self . admin = json [ \"admin\" ] self . accessAllResources = json [ \"accessAllResources\" ] self . locale = json [ \"locale\" ] self . roles = [] for i in json [ \"locale\" ]: self . roles . append ( Role ( i , self . _http )) self . rawJson = json delete delete ( x_request_id = None , x_trace_id = None ) deletes the user Examples: >>> user . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the user has been succesfully deleted. Source code in pyContabo/User.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the user Examples: >>> user.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the user has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/users/ { self . userId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False resendEmailVerification resendEmailVerification ( redirectUrl = None , x_request_id = None , x_trace_id = None ) Resend email verification for the specific user. Examples: >>> user . resendEmailVerification ( redirectUrl = \"https://test.contabo.de\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None redirectUrl str The redirect url used for resetting password None Returns: Type Description bool Bool respresenting if the email verification has been succesfully sent. Source code in pyContabo/User.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def resendEmailVerification ( self , redirectUrl : str = None , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Resend email verification for the specific user. Examples: >>> user.resendEmailVerification(redirectUrl=\"https://test.contabo.de\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. redirectUrl: The redirect url used for resetting password Returns: Bool respresenting if the email verification has been succesfully sent. \"\"\" if redirectUrl : resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/users/ { self . userId } /resend-email-verification\" , data = { \"redirectUrl\" : redirectUrl }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) else : resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/users/ { self . userId } /resend-email-verification\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False resetPassword resetPassword ( redirectUrl = None , x_request_id = None , x_trace_id = None ) Send reset password email to the user. Examples: >>> user . resetPassword ( redirectUrl = \"https://test.contabo.de\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None redirectUrl str The redirect url used for resetting password None Returns: Type Description bool Bool respresenting if the user's password has been succesfully reset. Source code in pyContabo/User.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def resetPassword ( self , redirectUrl : str = None , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Send reset password email to the user. Examples: >>> user.resetPassword(redirectUrl=\"https://test.contabo.de\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. redirectUrl: The redirect url used for resetting password Returns: Bool respresenting if the user's password has been succesfully reset. \"\"\" if redirectUrl : resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/users/ { self . userId } /reset-password\" , data = { \"redirectUrl\" : redirectUrl }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) else : resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/users/ { self . userId } /reset-password\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False update update ( firstName = None , lastName = None , email = None , enabled = None , totp = None , admin = None , accessAllResources = None , locale = None , roles = None , x_request_id = None , x_trace_id = None , ) Update attributes of a user. You may only specify the attributes you want to change. If an attribute is not set, it will retain its original value. Examples: >>> user . update ( firstName = \"name\" , lastNAme = \"name\" , email = \"example@example.com\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None firstName str The name of the user. Names may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. None lastName str The last name of the user. Users may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. None email str The email of the user to which activation and forgot password links are being sent to. There is a limit of 255 characters per email. None enabled bool If uses is not enabled, he can't login and thus use services any longer. None totp bool Enable or disable two-factor authentication (2FA) via time based OTP. None locale str The locale of the user. This can be de-DE , de , en-US , en . None roles List [ int ] The roles as list of roleId s of the user. None Returns: Type Description bool Bool respresenting if the user has been succesfully updated. Source code in pyContabo/User.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def update ( self , firstName : str = None , lastName : str = None , email : str = None , enabled : bool = None , totp : bool = None , admin : bool = None , accessAllResources : bool = None , locale : str = None , roles : List [ int ] = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Update attributes of a user. You may only specify the attributes you want to change. If an attribute is not set, it will retain its original value. Examples: >>> user.update(firstName=\"name\", lastNAme=\"name\", email=\"example@example.com\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. firstName: The name of the user. Names may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. lastName: The last name of the user. Users may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. email: The email of the user to which activation and forgot password links are being sent to. There is a limit of 255 characters per email. enabled: If uses is not enabled, he can't login and thus use services any longer. totp: Enable or disable two-factor authentication (2FA) via time based OTP. locale: The locale of the user. This can be `de-DE`, `de`, `en-US`, `en`. roles: The roles as list of `roleId`s of the user. Returns: Bool respresenting if the user has been succesfully updated. \"\"\" data = {} if firstName : data . append ( firstName ) if lastName : data . append ( lastName ) if email : data . append ( email ) if enabled : data . append ( enabled ) if totp : data . append ( totp ) if admin : data . append ( admin ) if accessAllResources : data . append ( accessAllResources ) if locale : data . append ( locale ) if roles : data . append ( roles ) resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/users/ { self . userId } \" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False UsersAudits UsersAudits ( _http ) Source code in pyContabo/audits/UsersAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http get get ( page = None , pageSize = None , orderBy = None , userId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> Users . Audits . get () [UsersAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None userId str The identifier of the user. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ UsersAudit ] List of UsersAudit Source code in pyContabo/audits/UsersAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , userId : str = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ UsersAudit ]: \"\"\"fetches audits Examples: >>> Users.Audits.get() [UsersAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` userId: The identifier of the user. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of UsersAudit \"\"\" url = f \"https://api.contabo.com/v1/tags/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'userId= { userId } &' if userId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( UsersAudit ( i )) return audits else : return []","title":"Users"},{"location":"users/#pyContabo.Users.Users","text":"Users ( _http ) Source code in pyContabo/Users.py 10 11 12 13 def __init__ ( self , _http ): self . _http = _http self . Audits = UsersAudits ( _http )","title":"Users"},{"location":"users/#pyContabo.Users.Users.create","text":"create ( email , enabled , totp , locale , firstName = None , lastName = None , roles = None , x_request_id = None , x_trace_id = None , ) Creates a new user Examples: >>> Users . create ( email = \"example@example.com\" , enabled = True , totp = False , locale = locale ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None email str The email of the user to which activation and forgot password links are being sent to. There is a limit of 255 characters per email. required enabled bool If user is not enabled, he can't login and thus use services any longer. required totp bool Enable or disable two-factor authentication (2FA) via time based OTP. required locale locale The locale of the user. This can be de-DE , de , en-US , en . required firstName str The name of the user. Names may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. None lastName str The last name of the user. Users may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. None roles List [ int ] The roles as list of roleId s of the user. None Returns: Type Description bool Bool respresenting if the secret has been succesfully created. Source code in pyContabo/Users.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 def create ( self , email : str , enabled : bool , totp : bool , locale : locale , firstName : str = None , lastName : str = None , roles : List [ int ] = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Creates a new user Examples: >>> Users.create(email=\"example@example.com\", enabled=True, totp=False, locale=locale) True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. email: The email of the user to which activation and forgot password links are being sent to. There is a limit of 255 characters per email. enabled: If user is not enabled, he can't login and thus use services any longer. totp: Enable or disable two-factor authentication (2FA) via time based OTP. locale: The locale of the user. This can be `de-DE`, `de`, `en-US`, `en`. firstName: The name of the user. Names may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. lastName: The last name of the user. Users may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. roles: The roles as list of `roleId`s of the user. Returns: Bool respresenting if the secret has been succesfully created. \"\"\" data = { \"firstName\" : firstName , \"lastName\" : lastName , \"email\" : email , \"enabled\" : enabled , \"totp\" : totp , \"locale\" : locale . name , } if roles : data . append ( roles ) resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/users\" , data = json . dumps ( data ), x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 201 : return True return False","title":"create()"},{"location":"users/#pyContabo.Users.Users.get","text":"get ( id = None , page = None , pageSize = None , orderBy = None , email = None , enabled = None , owner = None , x_request_id = None , x_trace_id = None , ) fetches any user(s) by id or other parameters Examples: >>> Users . get () [user] >>> Users . get ( email = \"mysecret\" , type = \"password\" ) [user] >>> Users . get ( id = \"6cdf5968-f9fe-4192-97c2-f349e813c5e8\" ) user Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None id str The identifier of the secret None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None email str Filter as substring match for user emails. None enabled bool Filter if user is enabled or not. None owner bool Filter if user is owner or not. None Returns: Type Description Union [ User , List [ User ]] List of users Source code in pyContabo/Users.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 def get ( self , id : str = None , page : int = None , pageSize : int = None , orderBy : str = None , email : str = None , enabled : bool = None , owner : bool = None , x_request_id : str = None , x_trace_id : str = None , ) -> Union [ User , List [ User ]]: \"\"\"fetches any user(s) by id or other parameters Examples: >>> Users.get() [user] >>> Users.get(email=\"mysecret\", type=\"password\") [user] >>> Users.get(id=\"6cdf5968-f9fe-4192-97c2-f349e813c5e8\") user Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. id: The identifier of the secret page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` email: Filter as substring match for user emails. enabled: Filter if user is enabled or not. owner: Filter if user is owner or not. Returns: List of users \"\"\" if id : resp = self . _http . request ( type = \"get\" , url = f \"https://api.contabo.com/v1/users/ { id } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 404 : return [] return User ( resp . json ()[ \"data\" ][ 0 ], self . _http ) else : url = f \"https://api.contabo.com/v1/compute/instances/ { self . instanceId } /snapshots? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'email= { email } &' if email is not None else '' }{ f 'enabled= { enabled } &' if enabled is not None else '' }{ f 'owner= { owner } &' if owner is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] users = [] for i in resp . json ()[ \"data\" ]: users . append ( User ( i , self . _http )) return users","title":"get()"},{"location":"users/#pyContabo.User.User","text":"User ( json , _http ) Source code in pyContabo/User.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def __init__ ( self , json , _http ): self . _http = _http self . tenantId = json [ \"tenantId\" ] self . customerId = json [ \"customerId\" ] self . userId = json [ \"userId\" ] self . firstName = json [ \"firstName\" ] self . lastName = json [ \"lastName\" ] self . email = json [ \"email\" ] self . emailVerified = json [ \"emailVerified\" ] self . enabled = json [ \"enabled\" ] self . totp = json [ \"totp\" ] self . admin = json [ \"admin\" ] self . accessAllResources = json [ \"accessAllResources\" ] self . locale = json [ \"locale\" ] self . roles = [] for i in json [ \"locale\" ]: self . roles . append ( Role ( i , self . _http )) self . rawJson = json","title":"User"},{"location":"users/#pyContabo.User.User.delete","text":"delete ( x_request_id = None , x_trace_id = None ) deletes the user Examples: >>> user . delete () True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None Returns: Type Description bool Bool respresenting if the user has been succesfully deleted. Source code in pyContabo/User.py 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 def delete ( self , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"deletes the user Examples: >>> user.delete() True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. Returns: Bool respresenting if the user has been succesfully deleted. \"\"\" resp = self . _http . request ( type = \"delete\" , url = f \"https://api.contabo.com/v1/users/ { self . userId } \" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False","title":"delete()"},{"location":"users/#pyContabo.User.User.resendEmailVerification","text":"resendEmailVerification ( redirectUrl = None , x_request_id = None , x_trace_id = None ) Resend email verification for the specific user. Examples: >>> user . resendEmailVerification ( redirectUrl = \"https://test.contabo.de\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None redirectUrl str The redirect url used for resetting password None Returns: Type Description bool Bool respresenting if the email verification has been succesfully sent. Source code in pyContabo/User.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 def resendEmailVerification ( self , redirectUrl : str = None , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Resend email verification for the specific user. Examples: >>> user.resendEmailVerification(redirectUrl=\"https://test.contabo.de\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. redirectUrl: The redirect url used for resetting password Returns: Bool respresenting if the email verification has been succesfully sent. \"\"\" if redirectUrl : resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/users/ { self . userId } /resend-email-verification\" , data = { \"redirectUrl\" : redirectUrl }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) else : resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/users/ { self . userId } /resend-email-verification\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False","title":"resendEmailVerification()"},{"location":"users/#pyContabo.User.User.resetPassword","text":"resetPassword ( redirectUrl = None , x_request_id = None , x_trace_id = None ) Send reset password email to the user. Examples: >>> user . resetPassword ( redirectUrl = \"https://test.contabo.de\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None redirectUrl str The redirect url used for resetting password None Returns: Type Description bool Bool respresenting if the user's password has been succesfully reset. Source code in pyContabo/User.py 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def resetPassword ( self , redirectUrl : str = None , x_request_id : str = None , x_trace_id : str = None ) -> bool : \"\"\"Send reset password email to the user. Examples: >>> user.resetPassword(redirectUrl=\"https://test.contabo.de\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. redirectUrl: The redirect url used for resetting password Returns: Bool respresenting if the user's password has been succesfully reset. \"\"\" if redirectUrl : resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/users/ { self . userId } /reset-password\" , data = { \"redirectUrl\" : redirectUrl }, x_request_id = x_request_id , x_trace_id = x_trace_id , ) else : resp = self . _http . request ( type = \"post\" , url = f \"https://api.contabo.com/v1/users/ { self . userId } /reset-password\" , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 204 : return True return False","title":"resetPassword()"},{"location":"users/#pyContabo.User.User.update","text":"update ( firstName = None , lastName = None , email = None , enabled = None , totp = None , admin = None , accessAllResources = None , locale = None , roles = None , x_request_id = None , x_trace_id = None , ) Update attributes of a user. You may only specify the attributes you want to change. If an attribute is not set, it will retain its original value. Examples: >>> user . update ( firstName = \"name\" , lastNAme = \"name\" , email = \"example@example.com\" ) True Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None firstName str The name of the user. Names may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. None lastName str The last name of the user. Users may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. None email str The email of the user to which activation and forgot password links are being sent to. There is a limit of 255 characters per email. None enabled bool If uses is not enabled, he can't login and thus use services any longer. None totp bool Enable or disable two-factor authentication (2FA) via time based OTP. None locale str The locale of the user. This can be de-DE , de , en-US , en . None roles List [ int ] The roles as list of roleId s of the user. None Returns: Type Description bool Bool respresenting if the user has been succesfully updated. Source code in pyContabo/User.py 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 def update ( self , firstName : str = None , lastName : str = None , email : str = None , enabled : bool = None , totp : bool = None , admin : bool = None , accessAllResources : bool = None , locale : str = None , roles : List [ int ] = None , x_request_id : str = None , x_trace_id : str = None , ) -> bool : \"\"\"Update attributes of a user. You may only specify the attributes you want to change. If an attribute is not set, it will retain its original value. Examples: >>> user.update(firstName=\"name\", lastNAme=\"name\", email=\"example@example.com\") True Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. firstName: The name of the user. Names may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. lastName: The last name of the user. Users may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per user. email: The email of the user to which activation and forgot password links are being sent to. There is a limit of 255 characters per email. enabled: If uses is not enabled, he can't login and thus use services any longer. totp: Enable or disable two-factor authentication (2FA) via time based OTP. locale: The locale of the user. This can be `de-DE`, `de`, `en-US`, `en`. roles: The roles as list of `roleId`s of the user. Returns: Bool respresenting if the user has been succesfully updated. \"\"\" data = {} if firstName : data . append ( firstName ) if lastName : data . append ( lastName ) if email : data . append ( email ) if enabled : data . append ( enabled ) if totp : data . append ( totp ) if admin : data . append ( admin ) if accessAllResources : data . append ( accessAllResources ) if locale : data . append ( locale ) if roles : data . append ( roles ) resp = self . _http . request ( type = \"patch\" , url = f \"https://api.contabo.com/v1/users/ { self . userId } \" , data = data , x_request_id = x_request_id , x_trace_id = x_trace_id , ) if resp . status_code == 200 : return True return False","title":"update()"},{"location":"users/#pyContabo.audits.UsersAudits.UsersAudits","text":"UsersAudits ( _http ) Source code in pyContabo/audits/UsersAudits.py 6 7 def __init__ ( self , _http ): self . _http = _http","title":"UsersAudits"},{"location":"users/#pyContabo.audits.UsersAudits.UsersAudits.get","text":"get ( page = None , pageSize = None , orderBy = None , userId = None , requestId = None , changedBy = None , startDate = None , endDate = None , x_request_id = None , x_trace_id = None , ) fetches audits Examples: >>> Users . Audits . get () [UsersAudit] Parameters: Name Type Description Default x_request_id str Uuid4 to identify individual requests for support cases. None x_trace_id str Identifier to trace group of requests. None page int Number of page to be fetched. None pageSize int Number of elements per page. None orderBy str Specify fields and ordering (ASC for ascending, DESC for descending) in following format field:ASC|DESC None userId str The identifier of the user. None requestId str The requestId of the API call which led to the change. None changedBy str UserId of the user which led to the change. None startDate str Start of search time range. None endDate str End of search time range. None Returns: Type Description List [ UsersAudit ] List of UsersAudit Source code in pyContabo/audits/UsersAudits.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 def get ( self , page : int = None , pageSize : int = None , orderBy : str = None , userId : str = None , requestId : str = None , changedBy : str = None , startDate : str = None , endDate : str = None , x_request_id : str = None , x_trace_id : str = None , ) -> List [ UsersAudit ]: \"\"\"fetches audits Examples: >>> Users.Audits.get() [UsersAudit] Args: x_request_id: Uuid4 to identify individual requests for support cases. x_trace_id: Identifier to trace group of requests. page: Number of page to be fetched. pageSize: Number of elements per page. orderBy: Specify fields and ordering (ASC for ascending, DESC for descending) in following format `field:ASC|DESC` userId: The identifier of the user. requestId: The requestId of the API call which led to the change. changedBy: UserId of the user which led to the change. startDate: Start of search time range. endDate: End of search time range. Returns: List of UsersAudit \"\"\" url = f \"https://api.contabo.com/v1/tags/audits? { f 'page= { page } &' if page is not None else '' }{ f 'size= { pageSize } &' if pageSize is not None else '' }{ f 'orderBy= { orderBy } &' if orderBy is not None else '' }{ f 'userId= { userId } &' if userId is not None else '' }{ f 'requestId= { requestId } &' if requestId is not None else '' }{ f 'changedBy= { changedBy } &' if changedBy is not None else '' }{ f 'startDate= { startDate } &' if startDate is not None else '' }{ f 'endDate= { endDate } &' if endDate is not None else '' } \" url = url [: - 1 ] resp = self . _http . request ( type = \"get\" , url = url , x_request_id = x_request_id , x_trace_id = x_trace_id ) if resp . status_code == 200 : data = resp . json ()[ \"data\" ] if len ( data ) == 0 : return [] audits = [] for i in resp . json ()[ \"data\" ]: audits . append ( UsersAudit ( i )) return audits else : return []","title":"get()"}]}